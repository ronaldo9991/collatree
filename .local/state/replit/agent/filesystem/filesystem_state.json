{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nCollaboTree is a full-stack student-only freelancing marketplace built with React/TypeScript frontend and Express.js backend. The platform connects verified students with buyers looking for student talent, featuring role-based access control for Students, Buyers, and Admins. The application includes project marketplace functionality, user verification systems, and comprehensive dashboard interfaces for each user role.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **UI Components**: shadcn/ui component library built on Radix UI primitives with Tailwind CSS for styling\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Routing**: Wouter for client-side routing with role-based route protection\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n- **Authentication**: Session-based auth with role guards protecting routes and components\n\n## Backend Architecture\n- **Framework**: Express.js server with TypeScript\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Authentication**: Express sessions for stateful authentication\n- **File Structure**: Separation of concerns with routes, storage abstraction, and middleware\n- **Development**: Vite middleware integration for hot module replacement in development\n\n## Database Design\n- **Users Table**: Core user information with role-based access (STUDENT, BUYER, ADMIN)\n- **Profile Tables**: Separate student and buyer profile tables with role-specific fields\n- **Projects Table**: Project listings with skills, pricing, and status management\n- **Verification System**: Student ID verification with document upload and admin approval workflow\n- **Relationships**: Foreign key relationships linking users to profiles and projects\n\n## Authentication & Authorization\n- **Session Management**: Express-session with secure cookie configuration\n- **Role-Based Access Control**: Middleware functions requiring specific roles for route access\n- **Route Protection**: Client-side route guards preventing unauthorized access\n- **Profile Verification**: Multi-step student verification process with document upload\n\n## Component Architecture\n- **Reusable Components**: Modular UI components (NavHeader, ProjectCard, StatCard, etc.)\n- **Role-Specific Dashboards**: Separate dashboard interfaces for Students, Buyers, and Admins\n- **Form Components**: Type-safe form components with validation and error handling\n- **Layout Components**: Consistent navigation and page structure across the application\n\n# External Dependencies\n\n## UI and Styling\n- **Tailwind CSS**: Utility-first CSS framework for styling\n- **Radix UI**: Headless UI components for accessibility and behavior\n- **Lucide React**: Icon library for consistent iconography\n- **Class Variance Authority**: Type-safe variant styling system\n\n## Database and ORM\n- **PostgreSQL**: Primary database (configured for Neon/Replit hosting)\n- **Drizzle ORM**: Type-safe database operations with schema definition\n- **Drizzle Kit**: Database migration and schema management tools\n\n## Development Tools\n- **TypeScript**: Type safety across frontend and backend\n- **Vite**: Fast build tool and development server\n- **ESBuild**: Production build bundling for server code\n- **Zod**: Runtime type validation for forms and API endpoints\n\n## Authentication and Sessions\n- **Express Session**: Server-side session management\n- **Connect PG Simple**: PostgreSQL session store adapter\n- **Crypto**: Node.js crypto for session security and UUID generation\n\n## State Management\n- **TanStack Query**: Server state management, caching, and synchronization\n- **React Hook Form**: Form state management with performance optimization\n- **Hookform Resolvers**: Zod integration for form validation\n\n## Additional Integrations\n- **Stripe**: Payment processing (React Stripe.js integration)\n- **File Upload**: Planned integration for student ID verification documents\n- **Email**: Planned transactional email capabilities\n- **Date Handling**: Date-fns library for date manipulation and formatting","size_bytes":4237},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n        \"2xl\": \"1.5rem\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        blue: {\n          50: \"var(--blue-50)\",\n          100: \"var(--blue-100)\",\n          200: \"var(--blue-200)\",\n          300: \"var(--blue-300)\",\n          400: \"var(--blue-400)\",\n          500: \"var(--blue-500)\",\n          600: \"var(--blue-600)\",\n          700: \"var(--blue-700)\",\n          800: \"var(--blue-800)\",\n          900: \"var(--blue-900)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      lineHeight: {\n        'relaxed-custom': '1.65',\n      },\n      backgroundImage: {\n        'brand-gradient': 'var(--brand-gradient)',\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3293},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { z } from \"zod\";\nimport session from \"express-session\";\nimport { randomUUID } from \"crypto\";\n\ndeclare module \"express-session\" {\n  interface SessionData {\n    userId?: string;\n    role?: string;\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Session middleware\n  app.use(session({\n    secret: process.env.SESSION_SECRET || 'collabotree-secret',\n    resave: false,\n    saveUninitialized: false,\n    cookie: { \n      secure: false, // Set to true in production with HTTPS\n      maxAge: 24 * 60 * 60 * 1000 // 24 hours\n    }\n  }));\n\n  // Auth middleware\n  const requireAuth = (req: any, res: any, next: any) => {\n    if (!req.session.userId) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n    next();\n  };\n\n  const requireRole = (roles: string[]) => {\n    return (req: any, res: any, next: any) => {\n      if (!req.session.role || !roles.includes(req.session.role)) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n      next();\n    };\n  };\n\n  // Auth routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      const user = await storage.getUserByEmail(email);\n      if (!user || user.password !== password) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      req.session.userId = user.id;\n      req.session.role = user.role;\n\n      // Get profile data based on role\n      let profile = null;\n      if (user.role === \"STUDENT\") {\n        profile = await storage.getStudentProfile(user.id);\n      } else if (user.role === \"BUYER\") {\n        profile = await storage.getBuyerProfile(user.id);\n      }\n\n      // Save the session before responding\n      req.session.save((err: any) => {\n        if (err) {\n          return res.status(500).json({ message: \"Session save failed\" });\n        }\n\n        res.json({ \n          user: { ...user, password: undefined }, \n          profile \n        });\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const schema = z.object({\n        email: z.string().email(),\n        password: z.string().min(6),\n        name: z.string().min(1),\n        role: z.enum([\"STUDENT\", \"BUYER\"]),\n        university: z.string().optional(),\n        studentId: z.string().optional(),\n        program: z.string().optional(),\n        companyName: z.string().optional(),\n      });\n\n      const data = schema.parse(req.body);\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(data.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists\" });\n      }\n\n      // Validate student email domain\n      if (data.role === \"STUDENT\") {\n        const allowedDomains = [\".edu\", \".ac.uk\", \".org\"];\n        const isValidDomain = allowedDomains.some(domain => data.email.endsWith(domain));\n        if (!isValidDomain) {\n          return res.status(400).json({ \n            message: \"Student registration requires an educational email address (.edu, .ac.uk, .org)\" \n          });\n        }\n\n        if (!data.university || !data.studentId || !data.program) {\n          return res.status(400).json({ \n            message: \"University, student ID, and program are required for students\" \n          });\n        }\n      }\n\n      // Create user\n      const user = await storage.createUser({\n        email: data.email,\n        password: data.password,\n        name: data.name,\n        role: data.role,\n        avatarUrl: null,\n      });\n\n      // Create profile based on role\n      let profile = null;\n      if (data.role === \"STUDENT\") {\n        profile = await storage.createStudentProfile({\n          userId: user.id,\n          university: data.university!,\n          studentId: data.studentId!,\n          program: data.program!,\n          verificationStatus: \"PENDING\",\n          verificationNotes: null,\n          idDocUrl: null,\n          selfieUrl: null,\n        });\n      } else if (data.role === \"BUYER\") {\n        profile = await storage.createBuyerProfile({\n          userId: user.id,\n          companyName: data.companyName || null,\n          website: null,\n          billingAddress: null,\n        });\n      }\n\n      req.session.userId = user.id;\n      req.session.role = user.role;\n\n      // Save the session before responding\n      req.session.save((err: any) => {\n        if (err) {\n          return res.status(500).json({ message: \"Session save failed\" });\n        }\n\n        res.json({ \n          user: { ...user, password: undefined }, \n          profile \n        });\n      });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Logout failed\" });\n      }\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  app.get(\"/api/auth/me\", requireAuth, async (req, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId!);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      let profile = null;\n      if (user.role === \"STUDENT\") {\n        profile = await storage.getStudentProfile(user.id);\n      } else if (user.role === \"BUYER\") {\n        profile = await storage.getBuyerProfile(user.id);\n      }\n\n      res.json({ \n        user: { ...user, password: undefined }, \n        profile \n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Project routes\n  app.get(\"/api/projects\", async (req, res) => {\n    try {\n      const { search, category, university, priceRange, ownerId, status, limit, offset } = req.query;\n\n      let projects;\n      if (search) {\n        projects = await storage.searchProjects(\n          search as string,\n          {\n            category: category as string,\n            university: university as string,\n            priceRange: priceRange as string,\n          }\n        );\n      } else {\n        projects = await storage.getProjects({\n          ownerId: ownerId as string,\n          status: status as string,\n          limit: limit ? parseInt(limit as string) : undefined,\n          offset: offset ? parseInt(offset as string) : undefined,\n        });\n      }\n\n      // Get owner info for each project\n      const projectsWithOwners = await Promise.all(\n        projects.map(async (project) => {\n          const owner = await storage.getUser(project.ownerId);\n          const studentProfile = owner?.role === \"STUDENT\" \n            ? await storage.getStudentProfile(project.ownerId)\n            : null;\n          \n          return {\n            ...project,\n            owner: owner ? { ...owner, password: undefined } : null,\n            studentProfile,\n          };\n        })\n      );\n\n      res.json(projectsWithOwners);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/projects/:idOrSlug\", async (req, res) => {\n    try {\n      const { idOrSlug } = req.params;\n      \n      let project = await storage.getProject(idOrSlug);\n      if (!project) {\n        project = await storage.getProjectBySlug(idOrSlug);\n      }\n      \n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const owner = await storage.getUser(project.ownerId);\n      const studentProfile = owner?.role === \"STUDENT\" \n        ? await storage.getStudentProfile(project.ownerId)\n        : null;\n\n      res.json({\n        ...project,\n        owner: owner ? { ...owner, password: undefined } : null,\n        studentProfile,\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/projects\", requireAuth, requireRole([\"STUDENT\"]), async (req, res) => {\n    try {\n      const schema = z.object({\n        title: z.string().min(1),\n        description: z.string().min(1),\n        skills: z.array(z.string()),\n        tags: z.array(z.string()),\n        price: z.number().min(1),\n        deliveryTime: z.number().min(1),\n        revisions: z.number().min(0).default(3),\n        status: z.enum([\"DRAFT\", \"LISTED\"]).default(\"DRAFT\"),\n      });\n\n      const data = schema.parse(req.body);\n      const slug = data.title.toLowerCase().replace(/[^a-z0-9]+/g, '-') + '-' + randomUUID().slice(0, 8);\n\n      const project = await storage.createProject({\n        ...data,\n        ownerId: req.session.userId!,\n        slug,\n        visibility: \"PUBLIC\",\n        coverImageUrl: null,\n      });\n\n      res.json(project);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.patch(\"/api/projects/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const project = await storage.getProject(id);\n      \n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      // Check ownership or admin role\n      if (project.ownerId !== req.session.userId && req.session.role !== \"ADMIN\") {\n        return res.status(403).json({ message: \"Not authorized\" });\n      }\n\n      const updates = req.body;\n      const updatedProject = await storage.updateProject(id, updates);\n      \n      res.json(updatedProject);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Favorites routes\n  app.get(\"/api/favorites\", requireAuth, requireRole([\"BUYER\"]), async (req, res) => {\n    try {\n      const favorites = await storage.getFavorites(req.session.userId!);\n      \n      const favoritesWithProjects = await Promise.all(\n        favorites.map(async (favorite) => {\n          const project = await storage.getProject(favorite.projectId);\n          return { ...favorite, project };\n        })\n      );\n\n      res.json(favoritesWithProjects);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/favorites\", requireAuth, requireRole([\"BUYER\"]), async (req, res) => {\n    try {\n      const schema = z.object({\n        projectId: z.string(),\n      });\n\n      const { projectId } = schema.parse(req.body);\n      const buyerId = req.session.userId!;\n\n      // Check if already favorited\n      const isAlreadyFavorite = await storage.isFavorite(buyerId, projectId);\n      if (isAlreadyFavorite) {\n        return res.status(400).json({ message: \"Project already in favorites\" });\n      }\n\n      const favorite = await storage.createFavorite({\n        buyerId,\n        projectId,\n      });\n\n      res.json(favorite);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.delete(\"/api/favorites/:projectId\", requireAuth, requireRole([\"BUYER\"]), async (req, res) => {\n    try {\n      const { projectId } = req.params;\n      const buyerId = req.session.userId!;\n\n      await storage.deleteFavorite(buyerId, projectId);\n      res.json({ message: \"Removed from favorites\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Orders routes\n  app.get(\"/api/orders\", requireAuth, async (req, res) => {\n    try {\n      const { status } = req.query;\n      \n      let filters: any = { status: status as string };\n      \n      if (req.session.role === \"BUYER\") {\n        filters.buyerId = req.session.userId;\n      } else if (req.session.role === \"STUDENT\") {\n        filters.studentId = req.session.userId;\n      }\n\n      const orders = await storage.getOrders(filters);\n      \n      const ordersWithDetails = await Promise.all(\n        orders.map(async (order) => {\n          const project = await storage.getProject(order.projectId);\n          const buyer = await storage.getUser(order.buyerId);\n          const student = await storage.getUser(order.studentId);\n          \n          return {\n            ...order,\n            project,\n            buyer: buyer ? { ...buyer, password: undefined } : null,\n            student: student ? { ...student, password: undefined } : null,\n          };\n        })\n      );\n\n      res.json(ordersWithDetails);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/orders\", requireAuth, requireRole([\"BUYER\"]), async (req, res) => {\n    try {\n      const schema = z.object({\n        projectId: z.string(),\n      });\n\n      const { projectId } = schema.parse(req.body);\n      const project = await storage.getProject(projectId);\n      \n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const order = await storage.createOrder({\n        projectId,\n        buyerId: req.session.userId!,\n        studentId: project.ownerId,\n        amount: project.price,\n        status: \"PENDING\",\n        stripeSessionId: null,\n      });\n\n      // In a real app, create Stripe checkout session here\n      // For demo, mark as paid immediately\n      const paidOrder = await storage.updateOrder(order.id, { status: \"PAID\" });\n\n      res.json(paidOrder);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Admin routes\n  app.get(\"/api/admin/verification-queue\", requireAuth, requireRole([\"ADMIN\"]), async (req, res) => {\n    try {\n      const pendingProfiles = await storage.getPendingVerifications();\n      \n      const profilesWithUsers = await Promise.all(\n        pendingProfiles.map(async (profile) => {\n          const user = await storage.getUser(profile.userId);\n          return {\n            ...profile,\n            user: user ? { ...user, password: undefined } : null,\n          };\n        })\n      );\n\n      res.json(profilesWithUsers);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/admin/verify/:userId\", requireAuth, requireRole([\"ADMIN\"]), async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const { status, notes } = req.body;\n\n      if (![\"APPROVED\", \"REJECTED\"].includes(status)) {\n        return res.status(400).json({ message: \"Invalid status\" });\n      }\n\n      const updatedProfile = await storage.updateStudentProfile(userId, {\n        verificationStatus: status,\n        verificationNotes: notes || null,\n      });\n\n      // Create notification for student\n      await storage.createNotification({\n        userId,\n        type: \"VERIFICATION_UPDATE\",\n        payload: { status, notes },\n      });\n\n      res.json(updatedProfile);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Mock file upload for student ID verification\n  app.post(\"/api/student/verify-id\", requireAuth, requireRole([\"STUDENT\"]), async (req, res) => {\n    try {\n      // In a real app, handle file upload and OCR here\n      const mockOcrData = {\n        name: \"Extracted Name\",\n        studentId: \"STU-2024-123456\",\n        university: \"Extracted University\",\n        confidence: 0.87,\n      };\n\n      await storage.updateStudentProfile(req.session.userId!, {\n        idDocUrl: \"mock-document-url.jpg\",\n        verificationStatus: \"PENDING\",\n      });\n\n      res.json({ \n        message: \"ID document uploaded successfully\",\n        ocrData: mockOcrData \n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Statistics for dashboards\n  app.get(\"/api/stats\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      const role = req.session.role!;\n\n      let stats = {};\n\n      if (role === \"STUDENT\") {\n        const projects = await storage.getProjects({ ownerId: userId });\n        const orders = await storage.getOrders({ studentId: userId });\n        const totalEarnings = orders\n          .filter(o => o.status === \"PAID\")\n          .reduce((sum, o) => sum + o.amount, 0);\n        \n        stats = {\n          totalEarnings,\n          activeOrders: orders.filter(o => [\"PENDING\", \"PAID\"].includes(o.status)).length,\n          totalProjects: projects.length,\n          activeProjects: projects.filter(p => p.status === \"LISTED\").length,\n        };\n      } else if (role === \"BUYER\") {\n        const orders = await storage.getOrders({ buyerId: userId });\n        const favorites = await storage.getFavorites(userId);\n        \n        stats = {\n          totalPurchases: orders.length,\n          activePurchases: orders.filter(o => [\"PENDING\", \"PAID\"].includes(o.status)).length,\n          totalFavorites: favorites.length,\n          totalSpent: orders\n            .filter(o => o.status === \"PAID\")\n            .reduce((sum, o) => sum + o.amount, 0),\n        };\n      } else if (role === \"ADMIN\") {\n        const allUsers = Array.from((storage as any).users.values());\n        const pendingVerifications = await storage.getPendingVerifications();\n        const allProjects = await storage.getProjects();\n        const allOrders = await storage.getOrders();\n        \n        stats = {\n          totalStudents: allUsers.filter((u: any) => u.role === \"STUDENT\").length,\n          pendingVerifications: pendingVerifications.length,\n          totalProjects: allProjects.length,\n          activeProjects: allProjects.filter(p => p.status === \"LISTED\").length,\n          monthlyGMV: allOrders\n            .filter(o => o.status === \"PAID\")\n            .reduce((sum, o) => sum + o.amount, 0),\n        };\n      }\n\n      res.json(stats);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":17873},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser,\n  type StudentProfile,\n  type InsertStudentProfile,\n  type BuyerProfile,\n  type InsertBuyerProfile,\n  type Project,\n  type InsertProject,\n  type Order,\n  type InsertOrder,\n  type Favorite,\n  type InsertFavorite,\n  type Review,\n  type InsertReview,\n  type Notification,\n  type InsertNotification,\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User>;\n\n  // Student Profiles\n  getStudentProfile(userId: string): Promise<StudentProfile | undefined>;\n  createStudentProfile(profile: InsertStudentProfile): Promise<StudentProfile>;\n  updateStudentProfile(userId: string, updates: Partial<StudentProfile>): Promise<StudentProfile>;\n  getPendingVerifications(): Promise<StudentProfile[]>;\n\n  // Buyer Profiles\n  getBuyerProfile(userId: string): Promise<BuyerProfile | undefined>;\n  createBuyerProfile(profile: InsertBuyerProfile): Promise<BuyerProfile>;\n\n  // Projects\n  getProject(id: string): Promise<Project | undefined>;\n  getProjectBySlug(slug: string): Promise<Project | undefined>;\n  getProjects(filters?: { ownerId?: string; status?: string; limit?: number; offset?: number }): Promise<Project[]>;\n  createProject(project: InsertProject): Promise<Project>;\n  updateProject(id: string, updates: Partial<Project>): Promise<Project>;\n  searchProjects(query: string, filters?: { category?: string; university?: string; priceRange?: string }): Promise<Project[]>;\n\n  // Orders\n  getOrder(id: string): Promise<Order | undefined>;\n  getOrders(filters?: { buyerId?: string; studentId?: string; status?: string }): Promise<Order[]>;\n  createOrder(order: InsertOrder): Promise<Order>;\n  updateOrder(id: string, updates: Partial<Order>): Promise<Order>;\n\n  // Favorites\n  getFavorites(buyerId: string): Promise<Favorite[]>;\n  createFavorite(favorite: InsertFavorite): Promise<Favorite>;\n  deleteFavorite(buyerId: string, projectId: string): Promise<void>;\n  isFavorite(buyerId: string, projectId: string): Promise<boolean>;\n\n  // Reviews\n  getReviewsByProject(projectId: string): Promise<Review[]>;\n  createReview(review: InsertReview): Promise<Review>;\n\n  // Notifications\n  getNotifications(userId: string): Promise<Notification[]>;\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  markNotificationRead(id: string): Promise<void>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private studentProfiles: Map<string, StudentProfile>;\n  private buyerProfiles: Map<string, BuyerProfile>;\n  private projects: Map<string, Project>;\n  private orders: Map<string, Order>;\n  private favorites: Map<string, Favorite>;\n  private reviews: Map<string, Review>;\n  private notifications: Map<string, Notification>;\n\n  constructor() {\n    this.users = new Map();\n    this.studentProfiles = new Map();\n    this.buyerProfiles = new Map();\n    this.projects = new Map();\n    this.orders = new Map();\n    this.favorites = new Map();\n    this.reviews = new Map();\n    this.notifications = new Map();\n\n    // Seed with demo data\n    this.seedData();\n  }\n\n  private seedData() {\n    // Create admin user\n    const adminId = randomUUID();\n    const admin: User = {\n      id: adminId,\n      email: \"admin@collabotree.com\",\n      password: \"admin123\",\n      name: \"Admin User\",\n      role: \"ADMIN\",\n      avatarUrl: null,\n      createdAt: new Date(),\n    };\n    this.users.set(adminId, admin);\n\n    // Create student users\n    const studentUsers = [\n      {\n        email: \"alex.kim@mit.edu\",\n        name: \"Alex Kim\",\n        university: \"MIT\",\n        studentId: \"STU-2024-001\",\n        program: \"Computer Science\",\n        skills: [\"React\", \"Node.js\", \"MongoDB\", \"JavaScript\"],\n        projects: [\n          {\n            title: \"Full-Stack React Application\",\n            description: \"I'll build a modern, responsive web application using React, Node.js, and MongoDB with authentication and payment integration.\",\n            price: 299,\n            category: \"Web Development\",\n            deliveryTime: 8,\n          }\n        ]\n      },\n      {\n        email: \"emma.rodriguez@stanford.edu\",\n        name: \"Emma Rodriguez\",\n        university: \"Stanford\",\n        studentId: \"STU-2024-002\",\n        program: \"Design\",\n        skills: [\"UI/UX\", \"Figma\", \"Branding\", \"Graphic Design\"],\n        projects: [\n          {\n            title: \"Brand Identity Package\",\n            description: \"Complete brand identity design including logo, business cards, letterhead, and brand guidelines for startups.\",\n            price: 149,\n            category: \"Design\",\n            deliveryTime: 3,\n          }\n        ]\n      },\n      {\n        email: \"david.park@berkeley.edu\",\n        name: \"David Park\",\n        university: \"UC Berkeley\",\n        studentId: \"STU-2024-003\",\n        program: \"Data Science\",\n        skills: [\"Python\", \"Machine Learning\", \"Tableau\", \"SQL\"],\n        projects: [\n          {\n            title: \"Data Analysis & Visualization\",\n            description: \"Comprehensive data analysis with Python, machine learning insights, and interactive dashboards using Tableau.\",\n            price: 399,\n            category: \"Data Science\",\n            deliveryTime: 6,\n          }\n        ]\n      },\n      {\n        email: \"sarah.chen@berkeley.edu\",\n        name: \"Sarah Chen\",\n        university: \"UC Berkeley\",\n        studentId: \"STU-2024-004\",\n        program: \"Computer Science\",\n        skills: [\"React\", \"TypeScript\", \"Node.js\"],\n        projects: []\n      }\n    ];\n\n    studentUsers.forEach((studentData, index) => {\n      const userId = randomUUID();\n      const user: User = {\n        id: userId,\n        email: studentData.email,\n        password: \"password123\",\n        name: studentData.name,\n        role: \"STUDENT\",\n        avatarUrl: null,\n        createdAt: new Date(),\n      };\n      this.users.set(userId, user);\n\n      const profileId = randomUUID();\n      const profile: StudentProfile = {\n        id: profileId,\n        userId,\n        university: studentData.university,\n        studentId: studentData.studentId,\n        program: studentData.program,\n        verificationStatus: index === 3 ? \"PENDING\" : \"APPROVED\", // Last one pending for demo\n        verificationNotes: null,\n        idDocUrl: null,\n        selfieUrl: null,\n        createdAt: new Date(),\n      };\n      this.studentProfiles.set(userId, profile);\n\n      // Create projects for this student\n      studentData.projects.forEach((projectData) => {\n        const projectId = randomUUID();\n        const slug = projectData.title.toLowerCase().replace(/[^a-z0-9]+/g, '-');\n        const project: Project = {\n          id: projectId,\n          ownerId: userId,\n          title: projectData.title,\n          slug,\n          description: projectData.description,\n          skills: studentData.skills,\n          tags: [projectData.category],\n          price: projectData.price,\n          status: \"LISTED\",\n          visibility: \"PUBLIC\",\n          coverImageUrl: null,\n          deliveryTime: projectData.deliveryTime,\n          revisions: 3,\n          createdAt: new Date(),\n        };\n        this.projects.set(projectId, project);\n      });\n    });\n\n    // Create buyer users\n    const buyerUsers = [\n      {\n        email: \"buyer1@company.com\",\n        name: \"John Smith\",\n        companyName: \"Tech Startup Inc\",\n      },\n      {\n        email: \"buyer2@business.com\",\n        name: \"Jane Doe\",\n        companyName: \"Marketing Solutions\",\n      }\n    ];\n\n    buyerUsers.forEach((buyerData) => {\n      const userId = randomUUID();\n      const user: User = {\n        id: userId,\n        email: buyerData.email,\n        password: \"password123\",\n        name: buyerData.name,\n        role: \"BUYER\",\n        avatarUrl: null,\n        createdAt: new Date(),\n      };\n      this.users.set(userId, user);\n\n      const profileId = randomUUID();\n      const profile: BuyerProfile = {\n        id: profileId,\n        userId,\n        companyName: buyerData.companyName,\n        website: null,\n        billingAddress: null,\n        createdAt: new Date(),\n      };\n      this.buyerProfiles.set(userId, profile);\n    });\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id, \n      role: insertUser.role || \"STUDENT\",\n      avatarUrl: insertUser.avatarUrl || null,\n      createdAt: new Date() \n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User> {\n    const user = this.users.get(id);\n    if (!user) throw new Error(\"User not found\");\n    \n    const updatedUser = { ...user, ...updates };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  // Student Profile methods\n  async getStudentProfile(userId: string): Promise<StudentProfile | undefined> {\n    return this.studentProfiles.get(userId);\n  }\n\n  async createStudentProfile(insertProfile: InsertStudentProfile): Promise<StudentProfile> {\n    const id = randomUUID();\n    const profile: StudentProfile = { \n      ...insertProfile, \n      id, \n      verificationStatus: insertProfile.verificationStatus || \"PENDING\",\n      verificationNotes: insertProfile.verificationNotes || null,\n      idDocUrl: insertProfile.idDocUrl || null,\n      selfieUrl: insertProfile.selfieUrl || null,\n      createdAt: new Date() \n    };\n    this.studentProfiles.set(insertProfile.userId, profile);\n    return profile;\n  }\n\n  async updateStudentProfile(userId: string, updates: Partial<StudentProfile>): Promise<StudentProfile> {\n    const profile = this.studentProfiles.get(userId);\n    if (!profile) throw new Error(\"Student profile not found\");\n    \n    const updatedProfile = { ...profile, ...updates };\n    this.studentProfiles.set(userId, updatedProfile);\n    return updatedProfile;\n  }\n\n  async getPendingVerifications(): Promise<StudentProfile[]> {\n    return Array.from(this.studentProfiles.values())\n      .filter(profile => profile.verificationStatus === \"PENDING\");\n  }\n\n  // Buyer Profile methods\n  async getBuyerProfile(userId: string): Promise<BuyerProfile | undefined> {\n    return this.buyerProfiles.get(userId);\n  }\n\n  async createBuyerProfile(insertProfile: InsertBuyerProfile): Promise<BuyerProfile> {\n    const id = randomUUID();\n    const profile: BuyerProfile = { \n      ...insertProfile, \n      id, \n      companyName: insertProfile.companyName || null,\n      website: insertProfile.website || null,\n      billingAddress: insertProfile.billingAddress || null,\n      createdAt: new Date() \n    };\n    this.buyerProfiles.set(insertProfile.userId, profile);\n    return profile;\n  }\n\n  // Project methods\n  async getProject(id: string): Promise<Project | undefined> {\n    return this.projects.get(id);\n  }\n\n  async getProjectBySlug(slug: string): Promise<Project | undefined> {\n    return Array.from(this.projects.values()).find(project => project.slug === slug);\n  }\n\n  async getProjects(filters?: { ownerId?: string; status?: string; limit?: number; offset?: number }): Promise<Project[]> {\n    let projects = Array.from(this.projects.values());\n    \n    if (filters?.ownerId) {\n      projects = projects.filter(p => p.ownerId === filters.ownerId);\n    }\n    \n    if (filters?.status) {\n      projects = projects.filter(p => p.status === filters.status);\n    }\n    \n    projects.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n    \n    if (filters?.offset) {\n      projects = projects.slice(filters.offset);\n    }\n    \n    if (filters?.limit) {\n      projects = projects.slice(0, filters.limit);\n    }\n    \n    return projects;\n  }\n\n  async createProject(insertProject: InsertProject): Promise<Project> {\n    const id = randomUUID();\n    const project: Project = { \n      ...insertProject, \n      id, \n      status: insertProject.status || \"DRAFT\",\n      visibility: insertProject.visibility || \"PUBLIC\",\n      coverImageUrl: insertProject.coverImageUrl || null,\n      revisions: insertProject.revisions || 3,\n      createdAt: new Date() \n    };\n    this.projects.set(id, project);\n    return project;\n  }\n\n  async updateProject(id: string, updates: Partial<Project>): Promise<Project> {\n    const project = this.projects.get(id);\n    if (!project) throw new Error(\"Project not found\");\n    \n    const updatedProject = { ...project, ...updates };\n    this.projects.set(id, updatedProject);\n    return updatedProject;\n  }\n\n  async searchProjects(query: string, filters?: { category?: string; university?: string; priceRange?: string }): Promise<Project[]> {\n    let projects = Array.from(this.projects.values())\n      .filter(p => p.status === \"LISTED\" && p.visibility === \"PUBLIC\");\n    \n    if (query) {\n      const lowerQuery = query.toLowerCase();\n      projects = projects.filter(p => \n        p.title.toLowerCase().includes(lowerQuery) ||\n        p.description.toLowerCase().includes(lowerQuery) ||\n        p.skills.some(skill => skill.toLowerCase().includes(lowerQuery)) ||\n        p.tags.some(tag => tag.toLowerCase().includes(lowerQuery))\n      );\n    }\n    \n    if (filters?.category && filters.category !== \"All Categories\") {\n      projects = projects.filter(p => p.tags.includes(filters.category!));\n    }\n    \n    return projects.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  // Order methods\n  async getOrder(id: string): Promise<Order | undefined> {\n    return this.orders.get(id);\n  }\n\n  async getOrders(filters?: { buyerId?: string; studentId?: string; status?: string }): Promise<Order[]> {\n    let orders = Array.from(this.orders.values());\n    \n    if (filters?.buyerId) {\n      orders = orders.filter(o => o.buyerId === filters.buyerId);\n    }\n    \n    if (filters?.studentId) {\n      orders = orders.filter(o => o.studentId === filters.studentId);\n    }\n    \n    if (filters?.status) {\n      orders = orders.filter(o => o.status === filters.status);\n    }\n    \n    return orders.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async createOrder(insertOrder: InsertOrder): Promise<Order> {\n    const id = randomUUID();\n    const order: Order = { \n      ...insertOrder, \n      id, \n      status: insertOrder.status || \"PENDING\",\n      stripeSessionId: insertOrder.stripeSessionId || null,\n      createdAt: new Date() \n    };\n    this.orders.set(id, order);\n    return order;\n  }\n\n  async updateOrder(id: string, updates: Partial<Order>): Promise<Order> {\n    const order = this.orders.get(id);\n    if (!order) throw new Error(\"Order not found\");\n    \n    const updatedOrder = { ...order, ...updates };\n    this.orders.set(id, updatedOrder);\n    return updatedOrder;\n  }\n\n  // Favorite methods\n  async getFavorites(buyerId: string): Promise<Favorite[]> {\n    return Array.from(this.favorites.values())\n      .filter(f => f.buyerId === buyerId);\n  }\n\n  async createFavorite(insertFavorite: InsertFavorite): Promise<Favorite> {\n    const id = randomUUID();\n    const favorite: Favorite = { \n      ...insertFavorite, \n      id, \n      createdAt: new Date() \n    };\n    this.favorites.set(id, favorite);\n    return favorite;\n  }\n\n  async deleteFavorite(buyerId: string, projectId: string): Promise<void> {\n    const favorite = Array.from(this.favorites.entries())\n      .find(([_, f]) => f.buyerId === buyerId && f.projectId === projectId);\n    \n    if (favorite) {\n      this.favorites.delete(favorite[0]);\n    }\n  }\n\n  async isFavorite(buyerId: string, projectId: string): Promise<boolean> {\n    return Array.from(this.favorites.values())\n      .some(f => f.buyerId === buyerId && f.projectId === projectId);\n  }\n\n  // Review methods\n  async getReviewsByProject(projectId: string): Promise<Review[]> {\n    return Array.from(this.reviews.values())\n      .filter(r => {\n        const order = Array.from(this.orders.values())\n          .find(o => o.id === r.orderId);\n        return order?.projectId === projectId;\n      });\n  }\n\n  async createReview(insertReview: InsertReview): Promise<Review> {\n    const id = randomUUID();\n    const review: Review = { \n      ...insertReview, \n      id, \n      comment: insertReview.comment || null,\n      createdAt: new Date() \n    };\n    this.reviews.set(id, review);\n    return review;\n  }\n\n  // Notification methods\n  async getNotifications(userId: string): Promise<Notification[]> {\n    return Array.from(this.notifications.values())\n      .filter(n => n.userId === userId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async createNotification(insertNotification: InsertNotification): Promise<Notification> {\n    const id = randomUUID();\n    const notification: Notification = { \n      ...insertNotification, \n      id, \n      readAt: null,\n      createdAt: new Date() \n    };\n    this.notifications.set(id, notification);\n    return notification;\n  }\n\n  async markNotificationRead(id: string): Promise<void> {\n    const notification = this.notifications.get(id);\n    if (notification) {\n      notification.readAt = new Date();\n      this.notifications.set(id, notification);\n    }\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":17517},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, boolean, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  name: text(\"name\").notNull(),\n  role: text(\"role\", { enum: [\"STUDENT\", \"BUYER\", \"ADMIN\"] }).notNull().default(\"STUDENT\"),\n  avatarUrl: text(\"avatar_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const studentProfiles = pgTable(\"student_profiles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).unique().notNull(),\n  university: text(\"university\").notNull(),\n  studentId: text(\"student_id\").notNull(),\n  program: text(\"program\").notNull(),\n  verificationStatus: text(\"verification_status\", { \n    enum: [\"PENDING\", \"APPROVED\", \"REJECTED\"] \n  }).notNull().default(\"PENDING\"),\n  verificationNotes: text(\"verification_notes\"),\n  idDocUrl: text(\"id_doc_url\"),\n  selfieUrl: text(\"selfie_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const buyerProfiles = pgTable(\"buyer_profiles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).unique().notNull(),\n  companyName: text(\"company_name\"),\n  website: text(\"website\"),\n  billingAddress: text(\"billing_address\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const projects = pgTable(\"projects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  ownerId: varchar(\"owner_id\").references(() => users.id).notNull(),\n  title: text(\"title\").notNull(),\n  slug: text(\"slug\").notNull().unique(),\n  description: text(\"description\").notNull(),\n  skills: text(\"skills\").array().notNull().default(sql`ARRAY[]::text[]`),\n  tags: text(\"tags\").array().notNull().default(sql`ARRAY[]::text[]`),\n  price: integer(\"price\").notNull(),\n  status: text(\"status\", { \n    enum: [\"DRAFT\", \"LISTED\", \"HIRED\", \"IN_PROGRESS\", \"DELIVERED\", \"CLOSED\"] \n  }).notNull().default(\"DRAFT\"),\n  visibility: text(\"visibility\", { enum: [\"PUBLIC\", \"PRIVATE\"] }).notNull().default(\"PUBLIC\"),\n  coverImageUrl: text(\"cover_image_url\"),\n  deliveryTime: integer(\"delivery_time\").notNull(), // weeks\n  revisions: integer(\"revisions\").notNull().default(3),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const teams = pgTable(\"teams\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").references(() => projects.id).notNull(),\n  name: text(\"name\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const teamMembers = pgTable(\"team_members\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  teamId: varchar(\"team_id\").references(() => teams.id).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  role: text(\"role\", { enum: [\"OWNER\", \"MEMBER\"] }).notNull().default(\"MEMBER\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const favorites = pgTable(\"favorites\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  buyerId: varchar(\"buyer_id\").references(() => users.id).notNull(),\n  projectId: varchar(\"project_id\").references(() => projects.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").references(() => projects.id).notNull(),\n  buyerId: varchar(\"buyer_id\").references(() => users.id).notNull(),\n  studentId: varchar(\"student_id\").references(() => users.id).notNull(),\n  amount: integer(\"amount\").notNull(),\n  status: text(\"status\", { \n    enum: [\"PENDING\", \"PAID\", \"REFUNDED\", \"DISPUTED\"] \n  }).notNull().default(\"PENDING\"),\n  stripeSessionId: text(\"stripe_session_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const reviews = pgTable(\"reviews\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: varchar(\"order_id\").references(() => orders.id).notNull(),\n  rating: integer(\"rating\").notNull(),\n  comment: text(\"comment\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  type: text(\"type\").notNull(),\n  payload: jsonb(\"payload\").notNull(),\n  readAt: timestamp(\"read_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const auditLogs = pgTable(\"audit_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  actorId: varchar(\"actor_id\").references(() => users.id),\n  action: text(\"action\").notNull(),\n  entityType: text(\"entity_type\").notNull(),\n  entityId: text(\"entity_id\").notNull(),\n  metadata: jsonb(\"metadata\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertStudentProfileSchema = createInsertSchema(studentProfiles).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBuyerProfileSchema = createInsertSchema(buyerProfiles).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProjectSchema = createInsertSchema(projects).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertFavoriteSchema = createInsertSchema(favorites).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertReviewSchema = createInsertSchema(reviews).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type StudentProfile = typeof studentProfiles.$inferSelect;\nexport type InsertStudentProfile = z.infer<typeof insertStudentProfileSchema>;\n\nexport type BuyerProfile = typeof buyerProfiles.$inferSelect;\nexport type InsertBuyerProfile = z.infer<typeof insertBuyerProfileSchema>;\n\nexport type Project = typeof projects.$inferSelect;\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\n\nexport type Team = typeof teams.$inferSelect;\nexport type TeamMember = typeof teamMembers.$inferSelect;\n\nexport type Favorite = typeof favorites.$inferSelect;\nexport type InsertFavorite = z.infer<typeof insertFavoriteSchema>;\n\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\n\nexport type Review = typeof reviews.$inferSelect;\nexport type InsertReview = z.infer<typeof insertReviewSchema>;\n\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\n\nexport type AuditLog = typeof auditLogs.$inferSelect;\n","size_bytes":7301},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/lib/auth\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport Auth from \"@/pages/auth\";\nimport StudentDashboard from \"@/pages/student-dashboard\";\nimport BuyerDashboard from \"@/pages/buyer-dashboard\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport ProjectDetail from \"@/pages/project-detail\";\nimport { RoleGuard } from \"@/components/role-guard\";\n\nfunction AuthGuard({ children }: { children: React.ReactNode }) {\n  const { data: authData, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  if (!authData?.user) {\n    return <Auth />;\n  }\n\n  return <>{children}</>;\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/auth\" component={Auth} />\n      \n      {/* Protected routes */}\n      <Route path=\"/\">\n        <AuthGuard>\n          <Home />\n        </AuthGuard>\n      </Route>\n      \n      <Route path=\"/student\">\n        <AuthGuard>\n          <RoleGuard allowedRoles={[\"STUDENT\", \"ADMIN\"]}>\n            <StudentDashboard />\n          </RoleGuard>\n        </AuthGuard>\n      </Route>\n      \n      <Route path=\"/buyer\">\n        <AuthGuard>\n          <RoleGuard allowedRoles={[\"BUYER\", \"ADMIN\"]}>\n            <BuyerDashboard />\n          </RoleGuard>\n        </AuthGuard>\n      </Route>\n      \n      <Route path=\"/admin\">\n        <AuthGuard>\n          <RoleGuard allowedRoles={[\"ADMIN\"]}>\n            <AdminDashboard />\n          </RoleGuard>\n        </AuthGuard>\n      </Route>\n      \n      <Route path=\"/marketplace\">\n        <AuthGuard>\n          <BuyerDashboard />\n        </AuthGuard>\n      </Route>\n      \n      <Route path=\"/project/:slug\">\n        {(params) => (\n          <AuthGuard>\n            <ProjectDetail slug={params.slug} />\n          </AuthGuard>\n        )}\n      </Route>\n      \n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2562},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(210, 25%, 7.8431%);\n  --card: hsl(180, 6.6667%, 97.0588%);\n  --card-foreground: hsl(210, 25%, 7.8431%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 25%, 7.8431%);\n  --primary: hsl(214, 88%, 62%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(210, 25%, 7.8431%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(240, 1.9608%, 90%);\n  --muted-foreground: hsl(210, 25%, 7.8431%);\n  --accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --accent-foreground: hsl(214, 88%, 62%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(201.4286, 30.4348%, 90.9804%);\n  --input: hsl(200, 23.0769%, 97.4510%);\n  --ring: hsl(214, 88%, 62%);\n  --chart-1: hsl(214, 88%, 62%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(214, 88%, 62%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(214, 88%, 62%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(214, 88%, 62%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(214, 88%, 62% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(214, 88%, 62% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(214, 88%, 62% / 0.00), 0px 1px 2px -1px hsl(214, 88%, 62% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(214, 88%, 62% / 0.00), 0px 1px 2px -1px hsl(214, 88%, 62% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(214, 88%, 62% / 0.00), 0px 2px 4px -1px hsl(214, 88%, 62% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(214, 88%, 62% / 0.00), 0px 4px 6px -1px hsl(214, 88%, 62% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(214, 88%, 62% / 0.00), 0px 8px 10px -1px hsl(214, 88%, 62% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(214, 88%, 62% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* CollaboTree Brand Colors */\n  --blue-50: hsl(214, 76%, 95%);\n  --blue-100: hsl(214, 74%, 92%);\n  --blue-200: hsl(214, 75%, 84%);\n  --blue-300: hsl(214, 76%, 75%);\n  --blue-400: hsl(214, 77%, 69%);\n  --blue-500: hsl(214, 88%, 62%);\n  --blue-600: hsl(214, 82%, 51%);\n  --blue-700: hsl(214, 76%, 41%);\n  --blue-800: hsl(214, 72%, 32%);\n  --blue-900: hsl(214, 68%, 23%);\n\n  --brand-gradient: linear-gradient(135deg, hsl(214, 77%, 69%), hsl(214, 76%, 41%));\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(214, 88%, 62%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195.0000, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(205.7143, 70%, 7.8431%);\n  --accent-foreground: hsl(214, 88%, 62%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(214, 88%, 62%);\n  --chart-1: hsl(214, 88%, 62%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(214, 88%, 62%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(214, 88%, 62%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(214, 88%, 62%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(214, 88%, 62% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(214, 88%, 62% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(214, 88%, 62% / 0.00), 0px 1px 2px -1px hsl(214, 88%, 62% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(214, 88%, 62% / 0.00), 0px 1px 2px -1px hsl(214, 88%, 62% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(214, 88%, 62% / 0.00), 0px 2px 4px -1px hsl(214, 88%, 62% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(214, 88%, 62% / 0.00), 0px 4px 6px -1px hsl(214, 88%, 62% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(214, 88%, 62% / 0.00), 0px 8px 10px -1px hsl(214, 88%, 62% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(214, 88%, 62% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    line-height: 1.65;\n  }\n}\n\n@layer utilities {\n  .bg-brand-gradient {\n    background: var(--brand-gradient);\n  }\n  \n  .text-brand-gradient {\n    background: var(--brand-gradient);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n}\n","size_bytes":5496},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/nav-header.tsx":{"content":"import { Network, Bell, Search, User, ChevronDown } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { \n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger \n} from \"@/components/ui/dropdown-menu\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth, useLogout } from \"@/lib/auth\";\nimport { Link, useLocation } from \"wouter\";\n\ninterface NavHeaderProps {\n  onRoleChange?: (role: \"STUDENT\" | \"BUYER\" | \"ADMIN\") => void;\n  currentRole?: \"STUDENT\" | \"BUYER\" | \"ADMIN\";\n}\n\nexport function NavHeader({ onRoleChange, currentRole }: NavHeaderProps) {\n  const { data: authData } = useAuth();\n  const logout = useLogout();\n  const [, setLocation] = useLocation();\n\n  const handleLogout = () => {\n    logout.mutate(undefined, {\n      onSuccess: () => {\n        setLocation(\"/auth\");\n      },\n    });\n  };\n\n  const user = authData?.user;\n\n  if (!user) return null;\n\n  return (\n    <nav className=\"bg-white border-b border-gray-200 sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo */}\n          <Link href=\"/\" className=\"flex items-center space-x-3\" data-testid=\"link-home\">\n            <img \n              src=\"/collabotree-logo.png\" \n              alt=\"CollaboTree Logo\" \n              className=\"w-8 h-8 rounded-lg\" \n            />\n            <span className=\"font-bold text-xl text-gray-900 tracking-tight\">CollaboTree</span>\n          </Link>\n\n          {/* Navigation Links */}\n          <div className=\"hidden md:flex items-center space-x-8\">\n            <Link href=\"/marketplace\" className=\"text-gray-600 hover:text-blue-600 font-medium transition-colors\" data-testid=\"link-marketplace\">\n              Marketplace\n            </Link>\n            <a href=\"#\" className=\"text-gray-600 hover:text-blue-600 font-medium transition-colors\">\n              How it Works\n            </a>\n            <a href=\"#\" className=\"text-gray-600 hover:text-blue-600 font-medium transition-colors\">\n              Support\n            </a>\n          </div>\n\n          {/* User Menu & Role Switcher */}\n          <div className=\"flex items-center space-x-4\">\n            {/* Role Switcher */}\n            {user.role === \"ADMIN\" && onRoleChange && (\n              <div className=\"hidden lg:flex bg-gray-100 rounded-xl p-1\">\n                <Button\n                  size=\"sm\"\n                  variant={currentRole === \"STUDENT\" ? \"default\" : \"ghost\"}\n                  className={currentRole === \"STUDENT\" ? \"bg-brand-gradient text-white\" : \"\"}\n                  onClick={() => onRoleChange(\"STUDENT\")}\n                  data-testid=\"button-role-student\"\n                >\n                  Student\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant={currentRole === \"BUYER\" ? \"default\" : \"ghost\"}\n                  className={currentRole === \"BUYER\" ? \"bg-brand-gradient text-white\" : \"\"}\n                  onClick={() => onRoleChange(\"BUYER\")}\n                  data-testid=\"button-role-buyer\"\n                >\n                  Buyer\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant={currentRole === \"ADMIN\" ? \"default\" : \"ghost\"}\n                  className={currentRole === \"ADMIN\" ? \"bg-brand-gradient text-white\" : \"\"}\n                  onClick={() => onRoleChange(\"ADMIN\")}\n                  data-testid=\"button-role-admin\"\n                >\n                  Admin\n                </Button>\n              </div>\n            )}\n\n            {/* Notifications */}\n            <div className=\"relative\">\n              <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-notifications\">\n                <Bell className=\"h-5 w-5\" />\n                <Badge className=\"absolute -top-1 -right-1 w-3 h-3 p-0 bg-red-500 text-white\">\n                  1\n                </Badge>\n              </Button>\n            </div>\n\n            {/* User Avatar & Menu */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" className=\"flex items-center space-x-2\" data-testid=\"button-user-menu\">\n                  <Avatar className=\"w-8 h-8\">\n                    <AvatarImage src={user.avatarUrl || undefined} />\n                    <AvatarFallback>\n                      {user.name.split(' ').map(n => n[0]).join('')}\n                    </AvatarFallback>\n                  </Avatar>\n                  <span className=\"hidden md:block text-sm font-medium text-gray-900\">\n                    {user.name}\n                  </span>\n                  <ChevronDown className=\"w-4 h-4 text-gray-500\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"w-56\">\n                <DropdownMenuItem asChild>\n                  <Link href={`/${user.role.toLowerCase()}`} data-testid=\"link-dashboard\">\n                    Dashboard\n                  </Link>\n                </DropdownMenuItem>\n                <DropdownMenuItem asChild>\n                  <Link href=\"/settings\" data-testid=\"link-settings\">\n                    Settings\n                  </Link>\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={handleLogout} data-testid=\"button-logout\">\n                  Logout\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":5676},"client/src/components/project-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Star, Heart } from \"lucide-react\";\nimport { Project } from \"@/types\";\nimport { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ProjectCardProps {\n  project: Project;\n  onHire?: (project: Project) => void;\n  onView?: (project: Project) => void;\n  showFavoriteButton?: boolean;\n  showHireButton?: boolean;\n}\n\nconst categoryColors: Record<string, string> = {\n  \"Web Development\": \"bg-blue-100 text-blue-700\",\n  \"Design\": \"bg-purple-100 text-purple-700\",\n  \"Data Science\": \"bg-green-100 text-green-700\",\n  \"Mobile Development\": \"bg-orange-100 text-orange-700\",\n  \"Marketing\": \"bg-pink-100 text-pink-700\",\n  \"Writing\": \"bg-yellow-100 text-yellow-700\",\n};\n\nexport function ProjectCard({ \n  project, \n  onHire, \n  onView,\n  showFavoriteButton = true,\n  showHireButton = true\n}: ProjectCardProps) {\n  const { data: authData } = useAuth();\n  const { toast } = useToast();\n  const [isFavorited, setIsFavorited] = useState(false);\n  const queryClient = useQueryClient();\n\n  const toggleFavorite = useMutation({\n    mutationFn: async () => {\n      if (isFavorited) {\n        await apiRequest(\"DELETE\", `/api/favorites/${project.id}`);\n      } else {\n        await apiRequest(\"POST\", \"/api/favorites\", { projectId: project.id });\n      }\n    },\n    onSuccess: () => {\n      setIsFavorited(!isFavorited);\n      queryClient.invalidateQueries({ queryKey: [\"/api/favorites\"] });\n      toast({\n        title: isFavorited ? \"Removed from favorites\" : \"Added to favorites\",\n        description: `${project.title} ${isFavorited ? \"removed from\" : \"added to\"} your favorites.`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const category = project.tags[0] || \"Other\";\n  const categoryStyle = categoryColors[category] || \"bg-gray-100 text-gray-700\";\n\n  return (\n    <Card \n      className=\"bg-white rounded-2xl shadow-md hover:shadow-xl transition-all duration-300 overflow-hidden border border-gray-100 cursor-pointer\"\n      onClick={() => onView?.(project)}\n      data-testid={`card-project-${project.id}`}\n    >\n      <div className=\"w-full h-48 bg-gradient-to-br from-blue-100 to-blue-200 flex items-center justify-center\">\n        <div className=\"text-6xl font-bold text-blue-600 opacity-20\">\n          {category.charAt(0)}\n        </div>\n      </div>\n      \n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <Badge className={categoryStyle}>\n            {category}\n          </Badge>\n          {showFavoriteButton && authData?.user.role === \"BUYER\" && (\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={(e) => {\n                e.stopPropagation();\n                toggleFavorite.mutate();\n              }}\n              className={`transition-colors ${isFavorited ? \"text-red-500\" : \"text-gray-400 hover:text-red-500\"}`}\n              data-testid={`button-favorite-${project.id}`}\n            >\n              <Heart className={`w-5 h-5 ${isFavorited ? \"fill-current\" : \"\"}`} />\n            </Button>\n          )}\n        </div>\n\n        <h3 className=\"font-bold text-lg text-gray-900 mb-2\" data-testid={`text-title-${project.id}`}>\n          {project.title}\n        </h3>\n        \n        <p className=\"text-gray-600 mb-4 text-sm leading-relaxed line-clamp-3\" data-testid={`text-description-${project.id}`}>\n          {project.description}\n        </p>\n\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-2\">\n            <Avatar className=\"w-8 h-8\">\n              <AvatarImage src={project.owner?.avatarUrl || undefined} />\n              <AvatarFallback>\n                {project.owner?.name.split(' ').map(n => n[0]).join('') || 'U'}\n              </AvatarFallback>\n            </Avatar>\n            <div>\n              <p className=\"text-sm font-medium text-gray-900\" data-testid={`text-owner-${project.id}`}>\n                {project.owner?.name}\n              </p>\n              <p className=\"text-xs text-gray-500\" data-testid={`text-university-${project.id}`}>\n                {project.studentProfile?.university}\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-1\">\n            <Star className=\"w-4 h-4 text-yellow-400 fill-current\" />\n            <span className=\"text-sm font-medium text-gray-700\">4.9</span>\n          </div>\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-blue-600 font-bold text-xl\" data-testid={`text-price-${project.id}`}>\n            ${project.price}\n          </span>\n          {showHireButton && authData?.user.role === \"BUYER\" && (\n            <Button\n              onClick={(e) => {\n                e.stopPropagation();\n                onHire?.(project);\n              }}\n              className=\"bg-blue-600 text-white hover:bg-blue-700\"\n              data-testid={`button-hire-${project.id}`}\n            >\n              Hire Student\n            </Button>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5605},"client/src/components/role-guard.tsx":{"content":"import { useAuth } from \"@/lib/auth\";\nimport { AuthUser } from \"@/types\";\n\ninterface RoleGuardProps {\n  children: React.ReactNode;\n  allowedRoles: AuthUser[\"role\"][];\n  fallback?: React.ReactNode;\n}\n\nexport function RoleGuard({ children, allowedRoles, fallback }: RoleGuardProps) {\n  const { data: authData, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  if (!authData?.user || !allowedRoles.includes(authData.user.role)) {\n    return fallback || (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Access Denied</h1>\n          <p className=\"text-gray-600\">You don't have permission to view this page.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return <>{children}</>;\n}\n","size_bytes":1011},"client/src/components/stat-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { LucideIcon } from \"lucide-react\";\n\ninterface StatCardProps {\n  title: string;\n  value: string | number;\n  icon: LucideIcon;\n  change?: string;\n  changeType?: \"positive\" | \"negative\" | \"neutral\";\n  iconBgColor?: string;\n  iconTextColor?: string;\n}\n\nexport function StatCard({ \n  title, \n  value, \n  icon: Icon, \n  change, \n  changeType = \"neutral\",\n  iconBgColor = \"bg-blue-100\",\n  iconTextColor = \"text-blue-600\"\n}: StatCardProps) {\n  const changeColor = {\n    positive: \"text-green-600\",\n    negative: \"text-red-600\",\n    neutral: \"text-gray-600\"\n  }[changeType];\n\n  return (\n    <Card className=\"bg-white rounded-2xl shadow-md border border-gray-100\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className={`w-12 h-12 ${iconBgColor} rounded-xl flex items-center justify-center`}>\n            <Icon className={`${iconTextColor} text-lg`} />\n          </div>\n          {change && (\n            <span className={`text-xs px-2 py-1 rounded-full bg-opacity-20 ${changeColor} bg-current`}>\n              {change}\n            </span>\n          )}\n        </div>\n        <h3 className=\"text-2xl font-bold text-gray-900 mb-1\" data-testid={`stat-value-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n          {value}\n        </h3>\n        <p className=\"text-gray-600 text-sm\" data-testid={`stat-title-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n          {title}\n        </p>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1550},"client/src/components/verification-status.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { CheckCircle, Clock, XCircle } from \"lucide-react\";\nimport { StudentProfile } from \"@/types\";\n\ninterface VerificationStatusProps {\n  status: StudentProfile[\"verificationStatus\"];\n  university?: string;\n  studentId?: string;\n  showDetails?: boolean;\n}\n\nexport function VerificationStatus({ \n  status, \n  university, \n  studentId, \n  showDetails = false \n}: VerificationStatusProps) {\n  const statusConfig = {\n    APPROVED: {\n      label: \"Verified Student\",\n      icon: CheckCircle,\n      className: \"bg-green-100 text-green-700\",\n      iconColor: \"text-green-600\",\n    },\n    PENDING: {\n      label: \"Pending Review\",\n      icon: Clock,\n      className: \"bg-yellow-100 text-yellow-700\",\n      iconColor: \"text-yellow-600\",\n    },\n    REJECTED: {\n      label: \"Verification Failed\",\n      icon: XCircle,\n      className: \"bg-red-100 text-red-700\",\n      iconColor: \"text-red-600\",\n    },\n  };\n\n  const config = statusConfig[status];\n  const Icon = config.icon;\n\n  if (showDetails) {\n    return (\n      <div className=\"bg-white rounded-2xl shadow-md border border-gray-100 p-6\">\n        <h2 className=\"text-lg font-bold text-gray-900 mb-4\">Verification Status</h2>\n        <div className=\"text-center\">\n          <div className={`w-16 h-16 ${config.className} rounded-full flex items-center justify-center mx-auto mb-4`}>\n            <Icon className={`${config.iconColor} text-xl`} />\n          </div>\n          <Badge className={config.className} data-testid=\"badge-verification-status\">\n            {config.label}\n          </Badge>\n          {university && (\n            <p className=\"text-gray-600 text-sm mt-2\" data-testid=\"text-university\">\n              {university}\n            </p>\n          )}\n          {studentId && (\n            <p className=\"text-gray-500 text-xs mt-1\" data-testid=\"text-student-id\">\n              ID: {studentId}\n            </p>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex items-center space-x-1\">\n      <Icon className={`w-4 h-4 ${config.iconColor}`} />\n      <Badge className={config.className} data-testid=\"badge-verification-status\">\n        {config.label}\n      </Badge>\n    </div>\n  );\n}\n","size_bytes":2225},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"./queryClient\";\nimport { AuthUser, StudentProfile, BuyerProfile } from \"@/types\";\n\ninterface AuthResponse {\n  user: AuthUser;\n  profile?: StudentProfile | BuyerProfile;\n}\n\nexport function useAuth() {\n  return useQuery<AuthResponse | null>({\n    queryKey: [\"/api/auth/me\"],\n    queryFn: async () => {\n      try {\n        const response = await fetch(\"/api/auth/me\", {\n          credentials: \"include\",\n        });\n        if (response.status === 401) {\n          return null;\n        }\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch user\");\n        }\n        return response.json();\n      } catch (error) {\n        return null;\n      }\n    },\n  });\n}\n\nexport function useLogin() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async (credentials: { email: string; password: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", credentials);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n    },\n  });\n}\n\nexport function useRegister() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async (data: {\n      email: string;\n      password: string;\n      name: string;\n      role: \"STUDENT\" | \"BUYER\";\n      university?: string;\n      studentId?: string;\n      program?: string;\n      companyName?: string;\n    }) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/register\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n    },\n  });\n}\n\nexport function useLogout() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/auth/logout\");\n    },\n    onSuccess: () => {\n      queryClient.clear();\n    },\n  });\n}\n","size_bytes":1997},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-dashboard.tsx":{"content":"import { NavHeader } from \"@/components/nav-header\";\nimport { StatCard } from \"@/components/stat-card\";\nimport { VerificationStatus } from \"@/components/verification-status\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { \n  Users, \n  Clock, \n  DollarSign, \n  FolderOpen, \n  AlertTriangle,\n  Check,\n  X,\n  IdCard,\n  UserCheck,\n  Plus,\n  ShoppingCart,\n  BarChart3,\n  Settings,\n  Search,\n  TrendingUp\n} from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/lib/auth\";\nimport { Stats, StudentProfile, AuthUser } from \"@/types\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState } from \"react\";\n\ninterface VerificationItem extends StudentProfile {\n  user?: AuthUser;\n}\n\nexport default function AdminDashboard() {\n  const { data: authData } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedVerification, setSelectedVerification] = useState<VerificationItem | null>(null);\n  const [verificationNotes, setVerificationNotes] = useState(\"\");\n\n  const { data: stats } = useQuery<Stats>({\n    queryKey: [\"/api/stats\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/stats\", { credentials: \"include\" });\n      return response.json();\n    },\n  });\n\n  const { data: pendingVerifications } = useQuery<VerificationItem[]>({\n    queryKey: [\"/api/admin/verification-queue\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/verification-queue\", {\n        credentials: \"include\",\n      });\n      return response.json();\n    },\n  });\n\n  const verifyStudent = useMutation({\n    mutationFn: async ({ userId, status, notes }: { userId: string; status: string; notes: string }) => {\n      const response = await apiRequest(\"POST\", `/api/admin/verify/${userId}`, { status, notes });\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/verification-queue\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n      setSelectedVerification(null);\n      setVerificationNotes(\"\");\n      toast({\n        title: `Student ${variables.status.toLowerCase()}`,\n        description: `Verification has been ${variables.status.toLowerCase()} successfully.`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleVerifyStudent = (userId: string, status: \"APPROVED\" | \"REJECTED\") => {\n    verifyStudent.mutate({ userId, status, notes: verificationNotes });\n  };\n\n  const openVerificationDialog = (verification: VerificationItem) => {\n    setSelectedVerification(verification);\n    setVerificationNotes(\"\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <NavHeader />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Dashboard Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\" data-testid=\"text-dashboard-title\">\n            Admin Dashboard\n          </h1>\n          <p className=\"text-gray-600\">Platform management and verification queue</p>\n        </div>\n\n        {/* Admin Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6 mb-8\">\n          <StatCard\n            title=\"Total Students\"\n            value={stats?.totalStudents || 0}\n            icon={Users}\n            change=\"+23 this week\"\n            changeType=\"positive\"\n            iconBgColor=\"bg-blue-100\"\n            iconTextColor=\"text-blue-600\"\n          />\n          <StatCard\n            title=\"Pending Verifications\"\n            value={stats?.pendingVerifications || 0}\n            icon={Clock}\n            change=\"Needs review\"\n            changeType=\"neutral\"\n            iconBgColor=\"bg-orange-100\"\n            iconTextColor=\"text-orange-600\"\n          />\n          <StatCard\n            title=\"Monthly GMV\"\n            value={`$${(stats?.monthlyGMV || 0) / 1000}K`}\n            icon={DollarSign}\n            change=\"+18% vs last month\"\n            changeType=\"positive\"\n            iconBgColor=\"bg-green-100\"\n            iconTextColor=\"text-green-600\"\n          />\n          <StatCard\n            title=\"Active Projects\"\n            value={stats?.activeProjects || 0}\n            icon={FolderOpen}\n            change=\"15 new today\"\n            changeType=\"positive\"\n            iconBgColor=\"bg-purple-100\"\n            iconTextColor=\"text-purple-600\"\n          />\n          <StatCard\n            title=\"Active Disputes\"\n            value=\"2\"\n            icon={AlertTriangle}\n            change=\"Requires attention\"\n            changeType=\"negative\"\n            iconBgColor=\"bg-red-100\"\n            iconTextColor=\"text-red-600\"\n          />\n        </div>\n\n        {/* Verification Queue */}\n        <Card className=\"bg-white rounded-2xl shadow-md border border-gray-100 mb-8\">\n          <CardHeader className=\"p-6 border-b border-gray-100\">\n            <CardTitle className=\"text-xl font-bold text-gray-900\">\n              Student Verification Queue\n            </CardTitle>\n            <p className=\"text-gray-600 text-sm mt-1\">\n              Review and approve student ID verifications\n            </p>\n          </CardHeader>\n          <CardContent className=\"p-6\">\n            {pendingVerifications?.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <UserCheck className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No pending verifications</h3>\n                <p className=\"text-gray-600\">All student verifications are up to date!</p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {pendingVerifications?.map((verification) => (\n                  <div\n                    key={verification.id}\n                    className=\"bg-gray-50 rounded-xl p-6\"\n                    data-testid={`verification-item-${verification.id}`}\n                  >\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-start space-x-4\">\n                        <Avatar className=\"w-16 h-16\">\n                          <AvatarImage src={verification.user?.avatarUrl || undefined} />\n                          <AvatarFallback>\n                            {verification.user?.name.split(' ').map(n => n[0]).join('') || 'U'}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div className=\"flex-1\">\n                          <h3 className=\"font-bold text-lg text-gray-900\" data-testid={`text-student-name-${verification.id}`}>\n                            {verification.user?.name}\n                          </h3>\n                          <p className=\"text-gray-600 mb-2\" data-testid={`text-student-email-${verification.id}`}>\n                            {verification.user?.email}\n                          </p>\n                          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                            <div>\n                              <span className=\"text-gray-500\">University:</span>\n                              <p className=\"font-medium\" data-testid={`text-university-${verification.id}`}>\n                                {verification.university}\n                              </p>\n                            </div>\n                            <div>\n                              <span className=\"text-gray-500\">Student ID:</span>\n                              <p className=\"font-medium\" data-testid={`text-student-id-${verification.id}`}>\n                                {verification.studentId}\n                              </p>\n                            </div>\n                            <div>\n                              <span className=\"text-gray-500\">Program:</span>\n                              <p className=\"font-medium\" data-testid={`text-program-${verification.id}`}>\n                                {verification.program}\n                              </p>\n                            </div>\n                          </div>\n                          <div className=\"mt-3\">\n                            <span className=\"text-gray-500 text-sm\">OCR Confidence:</span>\n                            <div className=\"flex items-center space-x-2 mt-1\">\n                              <div className=\"w-32 bg-gray-200 rounded-full h-2\">\n                                <div \n                                  className=\"bg-green-500 h-2 rounded-full\" \n                                  style={{ width: \"87%\" }}\n                                ></div>\n                              </div>\n                              <span className=\"text-sm font-medium text-green-600\">87%</span>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-3\">\n                        {/* Mock student ID document thumbnail */}\n                        <Button\n                          variant=\"outline\"\n                          size=\"icon\"\n                          className=\"w-20 h-14 bg-gray-200 hover:bg-gray-300\"\n                          onClick={() => openVerificationDialog(verification)}\n                          data-testid={`button-view-document-${verification.id}`}\n                        >\n                          <IdCard className=\"w-6 h-6 text-gray-500\" />\n                        </Button>\n                        <div className=\"flex flex-col space-y-2\">\n                          <Button\n                            onClick={() => handleVerifyStudent(verification.userId, \"APPROVED\")}\n                            disabled={verifyStudent.isPending}\n                            className=\"bg-green-600 text-white hover:bg-green-700\"\n                            data-testid={`button-approve-${verification.id}`}\n                          >\n                            <Check className=\"w-4 h-4 mr-2\" />\n                            Approve\n                          </Button>\n                          <Button\n                            onClick={() => openVerificationDialog(verification)}\n                            variant=\"outline\"\n                            className=\"border-red-200 text-red-600 hover:bg-red-50\"\n                            data-testid={`button-reject-${verification.id}`}\n                          >\n                            <X className=\"w-4 h-4 mr-2\" />\n                            Reject\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n\n                {pendingVerifications && pendingVerifications.length > 2 && (\n                  <div className=\"text-center py-4\">\n                    <Button\n                      variant=\"ghost\"\n                      className=\"text-blue-600 hover:text-blue-700\"\n                      data-testid=\"button-view-all-verifications\"\n                    >\n                      View All Pending Verifications ({pendingVerifications.length - 2} more)\n                    </Button>\n                  </div>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Verification Dialog */}\n        <Dialog \n          open={!!selectedVerification} \n          onOpenChange={(open) => !open && setSelectedVerification(null)}\n        >\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Student Verification Review</DialogTitle>\n            </DialogHeader>\n            {selectedVerification && (\n              <div className=\"space-y-6\">\n                <div className=\"flex items-center space-x-4\">\n                  <Avatar className=\"w-16 h-16\">\n                    <AvatarImage src={selectedVerification.user?.avatarUrl || undefined} />\n                    <AvatarFallback>\n                      {selectedVerification.user?.name.split(' ').map(n => n[0]).join('') || 'U'}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div>\n                    <h3 className=\"font-bold text-lg text-gray-900\">\n                      {selectedVerification.user?.name}\n                    </h3>\n                    <p className=\"text-gray-600\">{selectedVerification.user?.email}</p>\n                    <p className=\"text-sm text-gray-500\">\n                      {selectedVerification.university} • {selectedVerification.program}\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"bg-gray-100 rounded-xl p-4\">\n                  <h4 className=\"font-medium text-gray-900 mb-2\">Document Preview</h4>\n                  <div className=\"bg-white rounded-lg p-8 text-center\">\n                    <IdCard className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-500\">Student ID Document</p>\n                    <p className=\"text-sm text-gray-400 mt-2\">\n                      In a real implementation, the uploaded document would be displayed here\n                    </p>\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"verification-notes\">Verification Notes (Optional)</Label>\n                  <Textarea\n                    id=\"verification-notes\"\n                    placeholder=\"Add any notes about this verification...\"\n                    value={verificationNotes}\n                    onChange={(e) => setVerificationNotes(e.target.value)}\n                    className=\"mt-2\"\n                    data-testid=\"textarea-verification-notes\"\n                  />\n                </div>\n\n                <div className=\"flex justify-end space-x-3\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setSelectedVerification(null)}\n                    data-testid=\"button-cancel-verification\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    onClick={() => handleVerifyStudent(selectedVerification.userId, \"REJECTED\")}\n                    disabled={verifyStudent.isPending}\n                    variant=\"outline\"\n                    className=\"border-red-200 text-red-600 hover:bg-red-50\"\n                    data-testid=\"button-reject-verification\"\n                  >\n                    <X className=\"w-4 h-4 mr-2\" />\n                    Reject\n                  </Button>\n                  <Button\n                    onClick={() => handleVerifyStudent(selectedVerification.userId, \"APPROVED\")}\n                    disabled={verifyStudent.isPending}\n                    className=\"bg-green-600 text-white hover:bg-green-700\"\n                    data-testid=\"button-approve-verification\"\n                  >\n                    <Check className=\"w-4 h-4 mr-2\" />\n                    Approve\n                  </Button>\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n\n        {/* Quick Management Tools */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Recent Activity */}\n          <Card className=\"bg-white rounded-2xl shadow-md border border-gray-100\">\n            <CardHeader className=\"p-6\">\n              <CardTitle className=\"text-xl font-bold text-gray-900\">Recent Platform Activity</CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-6 pt-0\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-4 p-3 bg-gray-50 rounded-xl\">\n                  <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center\">\n                    <UserCheck className=\"w-5 h-5 text-green-600\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium text-gray-900\">Student verified</p>\n                    <p className=\"text-sm text-gray-500\">Sarah Chen from UC Berkeley</p>\n                  </div>\n                  <span className=\"text-xs text-gray-400\">2h ago</span>\n                </div>\n\n                <div className=\"flex items-center space-x-4 p-3 bg-gray-50 rounded-xl\">\n                  <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n                    <Plus className=\"w-5 h-5 text-blue-600\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium text-gray-900\">New project listed</p>\n                    <p className=\"text-sm text-gray-500\">React Dashboard by Alex Kim</p>\n                  </div>\n                  <span className=\"text-xs text-gray-400\">4h ago</span>\n                </div>\n\n                <div className=\"flex items-center space-x-4 p-3 bg-gray-50 rounded-xl\">\n                  <div className=\"w-10 h-10 bg-purple-100 rounded-full flex items-center justify-center\">\n                    <ShoppingCart className=\"w-5 h-5 text-purple-600\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium text-gray-900\">Order completed</p>\n                    <p className=\"text-sm text-gray-500\">$299 Logo Design project</p>\n                  </div>\n                  <span className=\"text-xs text-gray-400\">6h ago</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Admin Tools */}\n          <Card className=\"bg-white rounded-2xl shadow-md border border-gray-100\">\n            <CardHeader className=\"p-6\">\n              <CardTitle className=\"text-xl font-bold text-gray-900\">Management Tools</CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-6 pt-0\">\n              <div className=\"grid grid-cols-1 gap-3\">\n                <Button\n                  variant=\"ghost\"\n                  className=\"bg-blue-50 text-blue-700 hover:bg-blue-100 justify-start p-4 h-auto\"\n                  data-testid=\"button-manage-users\"\n                >\n                  <Users className=\"w-5 h-5 mr-3\" />\n                  <div className=\"text-left\">\n                    <div className=\"font-medium\">Manage Users</div>\n                    <div className=\"text-sm text-blue-600\">Search, suspend, or promote users</div>\n                  </div>\n                </Button>\n\n                <Button\n                  variant=\"ghost\"\n                  className=\"bg-gray-50 text-gray-700 hover:bg-gray-100 justify-start p-4 h-auto\"\n                  data-testid=\"button-moderate-projects\"\n                >\n                  <FolderOpen className=\"w-5 h-5 mr-3\" />\n                  <div className=\"text-left\">\n                    <div className=\"font-medium\">Moderate Projects</div>\n                    <div className=\"text-sm text-gray-600\">Review and manage project listings</div>\n                  </div>\n                </Button>\n\n                <Button\n                  variant=\"ghost\"\n                  className=\"bg-gray-50 text-gray-700 hover:bg-gray-100 justify-start p-4 h-auto\"\n                  data-testid=\"button-analytics-dashboard\"\n                >\n                  <BarChart3 className=\"w-5 h-5 mr-3\" />\n                  <div className=\"text-left\">\n                    <div className=\"font-medium\">Analytics Dashboard</div>\n                    <div className=\"text-sm text-gray-600\">Platform metrics and insights</div>\n                  </div>\n                </Button>\n\n                <Button\n                  variant=\"ghost\"\n                  className=\"bg-gray-50 text-gray-700 hover:bg-gray-100 justify-start p-4 h-auto\"\n                  data-testid=\"button-platform-settings\"\n                >\n                  <Settings className=\"w-5 h-5 mr-3\" />\n                  <div className=\"text-left\">\n                    <div className=\"font-medium\">Platform Settings</div>\n                    <div className=\"text-sm text-gray-600\">Configure domain allowlist and features</div>\n                  </div>\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":20839},"client/src/pages/auth.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Network } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useLogin, useRegister } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nconst registerSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  name: z.string().min(1, \"Name is required\"),\n  role: z.enum([\"STUDENT\", \"BUYER\"]),\n  university: z.string().optional(),\n  studentId: z.string().optional(),\n  program: z.string().optional(),\n  companyName: z.string().optional(),\n}).refine((data) => {\n  if (data.role === \"STUDENT\") {\n    return data.university && data.studentId && data.program;\n  }\n  return true;\n}, {\n  message: \"University, Student ID, and Program are required for students\",\n  path: [\"university\"],\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\ntype RegisterForm = z.infer<typeof registerSchema>;\n\nexport default function Auth() {\n  const [activeTab, setActiveTab] = useState(\"login\");\n  const [selectedRole, setSelectedRole] = useState<\"STUDENT\" | \"BUYER\">(\"STUDENT\");\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  const login = useLogin();\n  const register = useRegister();\n\n  const loginForm = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const registerForm = useForm<RegisterForm>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      name: \"\",\n      role: \"STUDENT\",\n      university: \"\",\n      studentId: \"\",\n      program: \"\",\n      companyName: \"\",\n    },\n  });\n\n  const onLogin = (data: LoginForm) => {\n    login.mutate(data, {\n      onSuccess: (response) => {\n        toast({\n          title: \"Welcome back!\",\n          description: \"You have been logged in successfully.\",\n        });\n        // Redirect based on role\n        const role = response.user.role.toLowerCase();\n        setLocation(`/${role}`);\n      },\n      onError: (error: any) => {\n        toast({\n          title: \"Login failed\",\n          description: error.message,\n          variant: \"destructive\",\n        });\n      },\n    });\n  };\n\n  const onRegister = (data: RegisterForm) => {\n    // Validate student email domain\n    if (data.role === \"STUDENT\") {\n      const allowedDomains = [\".edu\", \".ac.uk\", \".org\"];\n      const isValidDomain = allowedDomains.some(domain => data.email.endsWith(domain));\n      if (!isValidDomain) {\n        toast({\n          title: \"Invalid email\",\n          description: \"Student registration requires an educational email address (.edu, .ac.uk, .org)\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n    }\n\n    register.mutate(data, {\n      onSuccess: (response) => {\n        toast({\n          title: \"Account created!\",\n          description: data.role === \"STUDENT\" \n            ? \"Please upload your student ID for verification.\"\n            : \"Welcome to CollaboTree!\",\n        });\n        // Redirect based on role\n        const role = response.user.role.toLowerCase();\n        setLocation(`/${role}`);\n      },\n      onError: (error: any) => {\n        toast({\n          title: \"Registration failed\",\n          description: error.message,\n          variant: \"destructive\",\n        });\n      },\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        {/* Logo */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center space-x-3 mb-4\">\n            <img \n              src=\"/collabotree-logo.png\" \n              alt=\"CollaboTree Logo\" \n              className=\"w-12 h-12 rounded-xl\" \n            />\n            <span className=\"font-bold text-2xl text-gray-900\">CollaboTree</span>\n          </div>\n          <p className=\"text-gray-600\">Student-only freelancing marketplace</p>\n        </div>\n\n        <Card className=\"rounded-2xl shadow-lg border-0\">\n          <CardHeader className=\"text-center pb-4\">\n            <CardTitle className=\"text-2xl font-bold text-gray-900\">\n              {activeTab === \"login\" ? \"Welcome Back\" : \"Join CollaboTree\"}\n            </CardTitle>\n          </CardHeader>\n          \n          <CardContent>\n            <Tabs value={activeTab} onValueChange={setActiveTab}>\n              <TabsList className=\"grid w-full grid-cols-2 mb-6\">\n                <TabsTrigger value=\"login\" data-testid=\"tab-login\">Login</TabsTrigger>\n                <TabsTrigger value=\"register\" data-testid=\"tab-register\">Sign Up</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"login\" className=\"space-y-4\">\n                <form onSubmit={loginForm.handleSubmit(onLogin)} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"login-email\">Email</Label>\n                    <Input\n                      id=\"login-email\"\n                      type=\"email\"\n                      {...loginForm.register(\"email\")}\n                      className=\"rounded-xl\"\n                      data-testid=\"input-login-email\"\n                    />\n                    {loginForm.formState.errors.email && (\n                      <p className=\"text-red-500 text-sm mt-1\">\n                        {loginForm.formState.errors.email.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"login-password\">Password</Label>\n                    <Input\n                      id=\"login-password\"\n                      type=\"password\"\n                      {...loginForm.register(\"password\")}\n                      className=\"rounded-xl\"\n                      data-testid=\"input-login-password\"\n                    />\n                    {loginForm.formState.errors.password && (\n                      <p className=\"text-red-500 text-sm mt-1\">\n                        {loginForm.formState.errors.password.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full bg-brand-gradient text-white rounded-xl py-3 font-semibold\"\n                    disabled={login.isPending}\n                    data-testid=\"button-login\"\n                  >\n                    {login.isPending ? \"Logging in...\" : \"Login\"}\n                  </Button>\n                </form>\n\n                {/* Demo credentials */}\n                <div className=\"mt-6 p-4 bg-gray-50 rounded-xl\">\n                  <p className=\"text-sm font-medium text-gray-700 mb-2\">Demo Accounts:</p>\n                  <div className=\"space-y-1 text-xs text-gray-600\">\n                    <p><strong>Student:</strong> alex.kim@mit.edu / password123</p>\n                    <p><strong>Buyer:</strong> buyer1@company.com / password123</p>\n                    <p><strong>Admin:</strong> admin@collabotree.com / admin123</p>\n                  </div>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"register\" className=\"space-y-4\">\n                <form onSubmit={registerForm.handleSubmit(onRegister)} className=\"space-y-4\">\n                  {/* Role Selection */}\n                  <div>\n                    <Label>I am a...</Label>\n                    <div className=\"flex space-x-2 mt-2\">\n                      <Button\n                        type=\"button\"\n                        variant={selectedRole === \"STUDENT\" ? \"default\" : \"outline\"}\n                        className=\"flex-1 rounded-xl\"\n                        onClick={() => {\n                          setSelectedRole(\"STUDENT\");\n                          registerForm.setValue(\"role\", \"STUDENT\");\n                        }}\n                        data-testid=\"button-role-student\"\n                      >\n                        Student\n                      </Button>\n                      <Button\n                        type=\"button\"\n                        variant={selectedRole === \"BUYER\" ? \"default\" : \"outline\"}\n                        className=\"flex-1 rounded-xl\"\n                        onClick={() => {\n                          setSelectedRole(\"BUYER\");\n                          registerForm.setValue(\"role\", \"BUYER\");\n                        }}\n                        data-testid=\"button-role-buyer\"\n                      >\n                        Buyer\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"register-name\">Full Name</Label>\n                    <Input\n                      id=\"register-name\"\n                      {...registerForm.register(\"name\")}\n                      className=\"rounded-xl\"\n                      data-testid=\"input-register-name\"\n                    />\n                    {registerForm.formState.errors.name && (\n                      <p className=\"text-red-500 text-sm mt-1\">\n                        {registerForm.formState.errors.name.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"register-email\">\n                      Email {selectedRole === \"STUDENT\" && \"(Use .edu, .ac.uk, or .org)\"}\n                    </Label>\n                    <Input\n                      id=\"register-email\"\n                      type=\"email\"\n                      {...registerForm.register(\"email\")}\n                      className=\"rounded-xl\"\n                      placeholder={selectedRole === \"STUDENT\" ? \"you@university.edu\" : \"you@company.com\"}\n                      data-testid=\"input-register-email\"\n                    />\n                    {registerForm.formState.errors.email && (\n                      <p className=\"text-red-500 text-sm mt-1\">\n                        {registerForm.formState.errors.email.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"register-password\">Password</Label>\n                    <Input\n                      id=\"register-password\"\n                      type=\"password\"\n                      {...registerForm.register(\"password\")}\n                      className=\"rounded-xl\"\n                      data-testid=\"input-register-password\"\n                    />\n                    {registerForm.formState.errors.password && (\n                      <p className=\"text-red-500 text-sm mt-1\">\n                        {registerForm.formState.errors.password.message}\n                      </p>\n                    )}\n                  </div>\n\n                  {/* Student-specific fields */}\n                  {selectedRole === \"STUDENT\" && (\n                    <>\n                      <div>\n                        <Label htmlFor=\"register-university\">University</Label>\n                        <Input\n                          id=\"register-university\"\n                          {...registerForm.register(\"university\")}\n                          className=\"rounded-xl\"\n                          placeholder=\"Massachusetts Institute of Technology\"\n                          data-testid=\"input-register-university\"\n                        />\n                        {registerForm.formState.errors.university && (\n                          <p className=\"text-red-500 text-sm mt-1\">\n                            {registerForm.formState.errors.university.message}\n                          </p>\n                        )}\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"register-student-id\">Student ID</Label>\n                        <Input\n                          id=\"register-student-id\"\n                          {...registerForm.register(\"studentId\")}\n                          className=\"rounded-xl\"\n                          placeholder=\"STU-2024-123456\"\n                          data-testid=\"input-register-student-id\"\n                        />\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"register-program\">Program/Major</Label>\n                        <Input\n                          id=\"register-program\"\n                          {...registerForm.register(\"program\")}\n                          className=\"rounded-xl\"\n                          placeholder=\"Computer Science\"\n                          data-testid=\"input-register-program\"\n                        />\n                      </div>\n                    </>\n                  )}\n\n                  {/* Buyer-specific fields */}\n                  {selectedRole === \"BUYER\" && (\n                    <div>\n                      <Label htmlFor=\"register-company\">Company Name (Optional)</Label>\n                      <Input\n                        id=\"register-company\"\n                        {...registerForm.register(\"companyName\")}\n                        className=\"rounded-xl\"\n                        placeholder=\"Your Company\"\n                        data-testid=\"input-register-company\"\n                      />\n                    </div>\n                  )}\n\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full bg-brand-gradient text-white rounded-xl py-3 font-semibold\"\n                    disabled={register.isPending}\n                    data-testid=\"button-register\"\n                  >\n                    {register.isPending ? \"Creating Account...\" : \"Create Account\"}\n                  </Button>\n                </form>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14434},"client/src/pages/buyer-dashboard.tsx":{"content":"import { NavHeader } from \"@/components/nav-header\";\nimport { StatCard } from \"@/components/stat-card\";\nimport { ProjectCard } from \"@/components/project-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Search, \n  ShoppingCart, \n  Heart, \n  Eye, \n  DollarSign,\n  History,\n  Settings\n} from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/lib/auth\";\nimport { Project, Stats, Order, Favorite } from \"@/types\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState } from \"react\";\nimport { useLocation } from \"wouter\";\n\nexport default function BuyerDashboard() {\n  const { data: authData } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"All Categories\");\n  const [selectedUniversity, setSelectedUniversity] = useState(\"All Universities\");\n  const [selectedPriceRange, setSelectedPriceRange] = useState(\"Price Range\");\n\n  const { data: stats } = useQuery<Stats>({\n    queryKey: [\"/api/stats\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/stats\", { credentials: \"include\" });\n      return response.json();\n    },\n  });\n\n  const { data: projects } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\", \"marketplace\", searchQuery, selectedCategory, selectedUniversity, selectedPriceRange],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (searchQuery) params.append(\"search\", searchQuery);\n      if (selectedCategory !== \"All Categories\") params.append(\"category\", selectedCategory);\n      if (selectedUniversity !== \"All Universities\") params.append(\"university\", selectedUniversity);\n      if (selectedPriceRange !== \"Price Range\") params.append(\"priceRange\", selectedPriceRange);\n      \n      const response = await fetch(`/api/projects?${params.toString()}`, {\n        credentials: \"include\",\n      });\n      return response.json();\n    },\n  });\n\n  const { data: orders } = useQuery<Order[]>({\n    queryKey: [\"/api/orders\", \"buyer\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/orders\", { credentials: \"include\" });\n      return response.json();\n    },\n  });\n\n  const { data: favorites } = useQuery<Favorite[]>({\n    queryKey: [\"/api/favorites\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/favorites\", { credentials: \"include\" });\n      return response.json();\n    },\n  });\n\n  const createOrder = useMutation({\n    mutationFn: async (projectId: string) => {\n      const response = await apiRequest(\"POST\", \"/api/orders\", { projectId });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n      toast({\n        title: \"Order created!\",\n        description: \"Your order has been placed successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleHireStudent = (project: Project) => {\n    createOrder.mutate(project.id);\n  };\n\n  const handleProjectView = (project: Project) => {\n    setLocation(`/project/${project.slug}`);\n  };\n\n  const handleSearch = () => {\n    // Query will automatically update due to searchQuery dependency\n  };\n\n  const recentOrders = orders?.slice(0, 2) || [];\n  const recentFavorites = favorites?.slice(0, 2) || [];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <NavHeader />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Dashboard Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\" data-testid=\"text-dashboard-title\">\n            Buyer Dashboard\n          </h1>\n          <p className=\"text-gray-600\">Browse projects and manage your purchases</p>\n        </div>\n\n        {/* Marketplace Filters */}\n        <Card className=\"bg-white rounded-2xl shadow-md border border-gray-100 p-6 mb-8\">\n          <div className=\"flex flex-wrap items-center gap-4\">\n            <div className=\"flex-1 min-w-64\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n                <Input\n                  placeholder=\"Search projects, skills...\"\n                  className=\"pl-10 rounded-xl\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  onKeyPress={(e) => e.key === \"Enter\" && handleSearch()}\n                  data-testid=\"input-search-projects\"\n                />\n              </div>\n            </div>\n            \n            <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n              <SelectTrigger className=\"w-48 rounded-xl\" data-testid=\"select-category\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"All Categories\">All Categories</SelectItem>\n                <SelectItem value=\"Web Development\">Web Development</SelectItem>\n                <SelectItem value=\"Design\">Design</SelectItem>\n                <SelectItem value=\"Data Science\">Data Science</SelectItem>\n                <SelectItem value=\"Mobile Development\">Mobile Development</SelectItem>\n                <SelectItem value=\"Marketing\">Marketing</SelectItem>\n                <SelectItem value=\"Writing\">Writing</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={selectedUniversity} onValueChange={setSelectedUniversity}>\n              <SelectTrigger className=\"w-48 rounded-xl\" data-testid=\"select-university\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"All Universities\">All Universities</SelectItem>\n                <SelectItem value=\"MIT\">MIT</SelectItem>\n                <SelectItem value=\"Stanford\">Stanford</SelectItem>\n                <SelectItem value=\"UC Berkeley\">UC Berkeley</SelectItem>\n                <SelectItem value=\"Harvard\">Harvard</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={selectedPriceRange} onValueChange={setSelectedPriceRange}>\n              <SelectTrigger className=\"w-48 rounded-xl\" data-testid=\"select-price-range\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"Price Range\">Price Range</SelectItem>\n                <SelectItem value=\"$0 - $100\">$0 - $100</SelectItem>\n                <SelectItem value=\"$100 - $300\">$100 - $300</SelectItem>\n                <SelectItem value=\"$300 - $500\">$300 - $500</SelectItem>\n                <SelectItem value=\"$500+\">$500+</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Button \n              onClick={handleSearch}\n              className=\"bg-blue-600 text-white hover:bg-blue-700 rounded-xl\"\n              data-testid=\"button-search\"\n            >\n              Search\n            </Button>\n          </div>\n        </Card>\n\n        {/* Project Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\n          {projects?.map((project) => (\n            <ProjectCard\n              key={project.id}\n              project={project}\n              onHire={handleHireStudent}\n              onView={handleProjectView}\n              showFavoriteButton={true}\n              showHireButton={true}\n            />\n          ))}\n        </div>\n\n        {/* Empty state */}\n        {projects?.length === 0 && (\n          <div className=\"text-center py-12\">\n            <Search className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No projects found</h3>\n            <p className=\"text-gray-600 mb-4\">Try adjusting your search filters</p>\n            <Button\n              onClick={() => {\n                setSearchQuery(\"\");\n                setSelectedCategory(\"All Categories\");\n                setSelectedUniversity(\"All Universities\");\n                setSelectedPriceRange(\"Price Range\");\n              }}\n              variant=\"outline\"\n              data-testid=\"button-clear-filters\"\n            >\n              Clear Filters\n            </Button>\n          </div>\n        )}\n\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          {/* Recent Purchases */}\n          <Card className=\"bg-white rounded-2xl shadow-md border border-gray-100\">\n            <CardHeader className=\"p-6\">\n              <CardTitle className=\"text-lg font-bold text-gray-900\">Recent Purchases</CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-6 pt-0\">\n              {recentOrders.length === 0 ? (\n                <div className=\"text-center py-4\">\n                  <ShoppingCart className=\"w-8 h-8 text-gray-400 mx-auto mb-2\" />\n                  <p className=\"text-sm text-gray-500\">No purchases yet</p>\n                </div>\n              ) : (\n                <div className=\"space-y-3\">\n                  {recentOrders.map((order) => (\n                    <div\n                      key={order.id}\n                      className=\"flex items-center justify-between p-3 bg-gray-50 rounded-xl\"\n                      data-testid={`order-item-${order.id}`}\n                    >\n                      <div>\n                        <p className=\"font-medium text-gray-900 text-sm\" data-testid={`text-order-title-${order.id}`}>\n                          {order.project?.title}\n                        </p>\n                        <p className=\"text-xs text-gray-500\">\n                          {order.student?.name} • ${order.amount}\n                        </p>\n                      </div>\n                      <Badge\n                        className={\n                          order.status === \"PAID\"\n                            ? \"bg-green-100 text-green-700\"\n                            : order.status === \"PENDING\"\n                            ? \"bg-yellow-100 text-yellow-700\"\n                            : \"bg-blue-100 text-blue-700\"\n                        }\n                        data-testid={`badge-order-status-${order.id}`}\n                      >\n                        {order.status === \"PAID\" ? \"Delivered\" : order.status}\n                      </Badge>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Favorites */}\n          <Card className=\"bg-white rounded-2xl shadow-md border border-gray-100\">\n            <CardHeader className=\"p-6\">\n              <CardTitle className=\"text-lg font-bold text-gray-900\">Favorites</CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-6 pt-0\">\n              {recentFavorites.length === 0 ? (\n                <div className=\"text-center py-4\">\n                  <Heart className=\"w-8 h-8 text-gray-400 mx-auto mb-2\" />\n                  <p className=\"text-sm text-gray-500\">No favorites yet</p>\n                </div>\n              ) : (\n                <div className=\"space-y-3\">\n                  {recentFavorites.map((favorite) => (\n                    <div\n                      key={favorite.id}\n                      className=\"flex items-center justify-between p-3 bg-gray-50 rounded-xl cursor-pointer hover:bg-gray-100\"\n                      onClick={() => favorite.project && handleProjectView(favorite.project)}\n                      data-testid={`favorite-item-${favorite.id}`}\n                    >\n                      <div>\n                        <p className=\"font-medium text-gray-900 text-sm\" data-testid={`text-favorite-title-${favorite.id}`}>\n                          {favorite.project?.title}\n                        </p>\n                        <p className=\"text-xs text-gray-500\">\n                          {favorite.project?.owner?.name} • ${favorite.project?.price}\n                        </p>\n                      </div>\n                      <Heart className=\"w-4 h-4 text-red-500 fill-current\" />\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Quick Actions */}\n          <Card className=\"bg-white rounded-2xl shadow-md border border-gray-100\">\n            <CardHeader className=\"p-6\">\n              <CardTitle className=\"text-lg font-bold text-gray-900\">Quick Actions</CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-6 pt-0\">\n              <div className=\"space-y-3\">\n                <Button\n                  variant=\"ghost\"\n                  className=\"w-full bg-blue-50 text-blue-700 hover:bg-blue-100 justify-start\"\n                  onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}\n                  data-testid=\"button-quick-browse\"\n                >\n                  <Search className=\"w-4 h-4 mr-3\" />\n                  Browse Projects\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  className=\"w-full bg-gray-50 text-gray-700 hover:bg-gray-100 justify-start\"\n                  data-testid=\"button-quick-order-history\"\n                >\n                  <History className=\"w-4 h-4 mr-3\" />\n                  Order History\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  className=\"w-full bg-gray-50 text-gray-700 hover:bg-gray-100 justify-start\"\n                  data-testid=\"button-quick-settings\"\n                >\n                  <Settings className=\"w-4 h-4 mr-3\" />\n                  Settings\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14426},"client/src/pages/home.tsx":{"content":"import { NavHeader } from \"@/components/nav-header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ProjectCard } from \"@/components/project-card\";\nimport { Network, Search } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Project } from \"@/types\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useLocation } from \"wouter\";\n\nexport default function Home() {\n  const { data: authData } = useAuth();\n  const [, setLocation] = useLocation();\n\n  const { data: featuredProjects } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/projects?limit=6\", {\n        credentials: \"include\",\n      });\n      return response.json();\n    },\n  });\n\n  const handleRoleRedirect = (role: \"STUDENT\" | \"BUYER\") => {\n    if (role === \"STUDENT\") {\n      setLocation(\"/student\");\n    } else {\n      setLocation(\"/buyer\");\n    }\n  };\n\n  const handleProjectView = (project: Project) => {\n    setLocation(`/project/${project.slug}`);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <NavHeader />\n      \n      {/* Hero Section */}\n      <section className=\"bg-brand-gradient py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h1 className=\"text-5xl md:text-6xl font-bold text-white mb-6 tracking-tight\">\n            Student-Only <br />Freelancing Marketplace\n          </h1>\n          <p className=\"text-xl text-blue-100 mb-12 max-w-3xl mx-auto leading-relaxed\">\n            Connect with verified students worldwide. Hire talented students for your projects or showcase your skills to global buyers.\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center mb-16\">\n            <Button \n              size=\"lg\"\n              className=\"bg-white text-blue-700 px-8 py-4 rounded-2xl font-semibold text-lg hover:bg-blue-50\"\n              onClick={() => handleRoleRedirect(\"STUDENT\")}\n              data-testid=\"button-student-cta\"\n            >\n              I'm a Student\n            </Button>\n            <Button \n              size=\"lg\"\n              variant=\"outline\"\n              className=\"bg-blue-800 text-white px-8 py-4 rounded-2xl font-semibold text-lg hover:bg-blue-900 border border-blue-600\"\n              onClick={() => handleRoleRedirect(\"BUYER\")}\n              data-testid=\"button-buyer-cta\"\n            >\n              I'm a Buyer\n            </Button>\n          </div>\n\n          {/* Live Search Bar */}\n          <div className=\"max-w-2xl mx-auto\">\n            <div className=\"bg-white rounded-2xl p-6 shadow-xl\">\n              <div className=\"flex items-center space-x-4\">\n                <Search className=\"text-gray-400 text-lg\" />\n                <Input \n                  type=\"text\" \n                  placeholder=\"Search projects, skills, or universities...\" \n                  className=\"flex-1 text-lg border-none outline-none text-gray-700 bg-transparent\"\n                  data-testid=\"input-search\"\n                />\n                <Button \n                  className=\"bg-blue-600 text-white px-6 py-3 rounded-xl font-medium hover:bg-blue-700\"\n                  data-testid=\"button-search\"\n                >\n                  Search\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Projects */}\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-4 tracking-tight\">\n              Featured Student Projects\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n              Discover amazing work from verified students at top universities\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {featuredProjects?.map((project) => (\n              <ProjectCard\n                key={project.id}\n                project={project}\n                onView={handleProjectView}\n                showFavoriteButton={authData?.user.role === \"BUYER\"}\n                showHireButton={authData?.user.role === \"BUYER\"}\n              />\n            ))}\n          </div>\n\n          <div className=\"text-center mt-12\">\n            <Button \n              size=\"lg\"\n              className=\"bg-blue-600 text-white px-8 py-4 rounded-2xl font-semibold text-lg hover:bg-blue-700\"\n              onClick={() => setLocation(\"/marketplace\")}\n              data-testid=\"button-view-all\"\n            >\n              View All Projects\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-white py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n            <div>\n              <div className=\"flex items-center space-x-3 mb-6\">\n                <img \n                  src=\"/collabotree-logo.png\" \n                  alt=\"CollaboTree Logo\" \n                  className=\"w-8 h-8 rounded-lg\" \n                />\n                <span className=\"font-bold text-xl\">CollaboTree</span>\n              </div>\n              <p className=\"text-gray-400 leading-relaxed\">\n                The world's first student-only freelancing marketplace. Connect with verified students from top universities.\n              </p>\n            </div>\n            \n            <div>\n              <h3 className=\"font-bold text-lg mb-4\">For Students</h3>\n              <ul className=\"space-y-2 text-gray-400\">\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">How to Get Started</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Verification Process</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Student Resources</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Success Stories</a></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h3 className=\"font-bold text-lg mb-4\">For Buyers</h3>\n              <ul className=\"space-y-2 text-gray-400\">\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Browse Projects</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">How it Works</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Trust & Safety</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Support</a></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h3 className=\"font-bold text-lg mb-4\">Company</h3>\n              <ul className=\"space-y-2 text-gray-400\">\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">About Us</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Terms of Service</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Privacy Policy</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Contact</a></li>\n              </ul>\n            </div>\n          </div>\n          \n          <div className=\"border-t border-gray-700 mt-12 pt-8 text-center text-gray-400\">\n            <p>&copy; 2024 CollaboTree. All rights reserved. Student-verified freelancing platform.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":7695},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/project-detail.tsx":{"content":"import { NavHeader } from \"@/components/nav-header\";\nimport { VerificationStatus } from \"@/components/verification-status\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  ArrowLeft, \n  Heart, \n  Star, \n  Check, \n  MessageCircle,\n  Clock,\n  RotateCcw,\n  GraduationCap\n} from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/lib/auth\";\nimport { Project } from \"@/types\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState } from \"react\";\nimport { useLocation } from \"wouter\";\n\ninterface ProjectDetailProps {\n  slug: string;\n}\n\nexport default function ProjectDetail({ slug }: ProjectDetailProps) {\n  const { data: authData } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n  const [isFavorited, setIsFavorited] = useState(false);\n\n  const { data: project, isLoading } = useQuery<Project>({\n    queryKey: [\"/api/projects\", slug],\n    queryFn: async () => {\n      const response = await fetch(`/api/projects/${slug}`, {\n        credentials: \"include\",\n      });\n      if (!response.ok) {\n        throw new Error(\"Project not found\");\n      }\n      return response.json();\n    },\n  });\n\n  const { data: relatedProjects } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\", \"related\", project?.ownerId],\n    queryFn: async () => {\n      if (!project?.ownerId) return [];\n      const response = await fetch(`/api/projects?ownerId=${project.ownerId}&limit=2`, {\n        credentials: \"include\",\n      });\n      return response.json();\n    },\n    enabled: !!project?.ownerId,\n  });\n\n  const createOrder = useMutation({\n    mutationFn: async (projectId: string) => {\n      const response = await apiRequest(\"POST\", \"/api/orders\", { projectId });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      toast({\n        title: \"Order created!\",\n        description: \"Your order has been placed successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const toggleFavorite = useMutation({\n    mutationFn: async () => {\n      if (!project) return;\n      if (isFavorited) {\n        await apiRequest(\"DELETE\", `/api/favorites/${project.id}`);\n      } else {\n        await apiRequest(\"POST\", \"/api/favorites\", { projectId: project.id });\n      }\n    },\n    onSuccess: () => {\n      setIsFavorited(!isFavorited);\n      queryClient.invalidateQueries({ queryKey: [\"/api/favorites\"] });\n      toast({\n        title: isFavorited ? \"Removed from favorites\" : \"Added to favorites\",\n        description: `${project?.title} ${isFavorited ? \"removed from\" : \"added to\"} your favorites.`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleHireStudent = () => {\n    if (!project) return;\n    createOrder.mutate(project.id);\n  };\n\n  const handleBackClick = () => {\n    setLocation(\"/buyer\");\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <NavHeader />\n        <div className=\"flex items-center justify-center min-h-[400px]\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (!project) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <NavHeader />\n        <div className=\"flex items-center justify-center min-h-[400px]\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Project not found</h1>\n            <p className=\"text-gray-600 mb-4\">The project you're looking for doesn't exist.</p>\n            <Button onClick={handleBackClick}>\n              Go back to marketplace\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const category = project.tags[0] || \"Other\";\n  const filteredRelatedProjects = relatedProjects?.filter(p => p.id !== project.id) || [];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <NavHeader />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Back Button */}\n        <Button\n          variant=\"ghost\"\n          onClick={handleBackClick}\n          className=\"flex items-center space-x-2 text-gray-600 hover:text-blue-600 mb-6\"\n          data-testid=\"button-back-to-marketplace\"\n        >\n          <ArrowLeft className=\"w-4 h-4\" />\n          <span>Back to Marketplace</span>\n        </Button>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Project Content */}\n          <div className=\"lg:col-span-2\">\n            {/* Project Header */}\n            <Card className=\"bg-white rounded-2xl shadow-md border border-gray-100 overflow-hidden mb-6\">\n              <div className=\"w-full h-64 bg-gradient-to-br from-blue-100 to-blue-200 flex items-center justify-center\">\n                <div className=\"text-6xl font-bold text-blue-600 opacity-20\">\n                  {category.charAt(0)}\n                </div>\n              </div>\n              \n              <CardContent className=\"p-8\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <Badge className=\"bg-blue-100 text-blue-700 px-4 py-2 font-medium\">\n                    {category}\n                  </Badge>\n                  {authData?.user.role === \"BUYER\" && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => toggleFavorite.mutate()}\n                      className={`transition-colors ${isFavorited ? \"text-red-500\" : \"text-gray-400 hover:text-red-500\"}`}\n                      data-testid=\"button-toggle-favorite\"\n                    >\n                      <Heart className={`w-6 h-6 ${isFavorited ? \"fill-current\" : \"\"}`} />\n                    </Button>\n                  )}\n                </div>\n\n                <h1 className=\"text-3xl font-bold text-gray-900 mb-4\" data-testid=\"text-project-title\">\n                  {project.title}\n                </h1>\n                \n                <p className=\"text-gray-600 text-lg leading-relaxed mb-6\" data-testid=\"text-project-description\">\n                  {project.description}\n                </p>\n\n                {/* Skills Tags */}\n                <div className=\"flex flex-wrap gap-2 mb-6\">\n                  {project.skills.map((skill, index) => (\n                    <Badge\n                      key={index}\n                      variant=\"secondary\"\n                      className=\"bg-gray-100 text-gray-700\"\n                      data-testid={`badge-skill-${index}`}\n                    >\n                      {skill}\n                    </Badge>\n                  ))}\n                </div>\n\n                {/* Student Info */}\n                <div className=\"flex items-center space-x-4 p-4 bg-gray-50 rounded-xl\">\n                  <Avatar className=\"w-16 h-16\">\n                    <AvatarImage src={project.owner?.avatarUrl || undefined} />\n                    <AvatarFallback>\n                      {project.owner?.name.split(' ').map(n => n[0]).join('') || 'U'}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-bold text-lg text-gray-900\" data-testid=\"text-student-name\">\n                      {project.owner?.name}\n                    </h3>\n                    <p className=\"text-gray-600\">Computer Science Student</p>\n                    <p className=\"text-blue-600 font-medium\" data-testid=\"text-student-university\">\n                      {project.studentProfile?.university}\n                    </p>\n                    <div className=\"flex items-center space-x-4 mt-2\">\n                      <div className=\"flex items-center space-x-1\">\n                        <Star className=\"w-4 h-4 text-yellow-400 fill-current\" />\n                        <span className=\"font-medium\">4.9</span>\n                        <span className=\"text-gray-500\">(24 reviews)</span>\n                      </div>\n                      {project.studentProfile && (\n                        <VerificationStatus \n                          status={project.studentProfile.verificationStatus}\n                          showDetails={false}\n                        />\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Project Details */}\n            <Card className=\"bg-white rounded-2xl shadow-md border border-gray-100\">\n              <CardContent className=\"p-8\">\n                <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">What You'll Get</h2>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-start space-x-3\">\n                    <Check className=\"w-5 h-5 text-green-500 mt-1 flex-shrink-0\" />\n                    <p className=\"text-gray-700\">Complete full-stack web application with modern React frontend</p>\n                  </div>\n                  <div className=\"flex items-start space-x-3\">\n                    <Check className=\"w-5 h-5 text-green-500 mt-1 flex-shrink-0\" />\n                    <p className=\"text-gray-700\">RESTful API backend with Node.js and Express</p>\n                  </div>\n                  <div className=\"flex items-start space-x-3\">\n                    <Check className=\"w-5 h-5 text-green-500 mt-1 flex-shrink-0\" />\n                    <p className=\"text-gray-700\">Database design and implementation with MongoDB</p>\n                  </div>\n                  <div className=\"flex items-start space-x-3\">\n                    <Check className=\"w-5 h-5 text-green-500 mt-1 flex-shrink-0\" />\n                    <p className=\"text-gray-700\">User authentication and authorization system</p>\n                  </div>\n                  <div className=\"flex items-start space-x-3\">\n                    <Check className=\"w-5 h-5 text-green-500 mt-1 flex-shrink-0\" />\n                    <p className=\"text-gray-700\">Responsive design that works on all devices</p>\n                  </div>\n                  <div className=\"flex items-start space-x-3\">\n                    <Check className=\"w-5 h-5 text-green-500 mt-1 flex-shrink-0\" />\n                    <p className=\"text-gray-700\">Deployment setup and documentation</p>\n                  </div>\n                  <div className=\"flex items-start space-x-3\">\n                    <Check className=\"w-5 h-5 text-green-500 mt-1 flex-shrink-0\" />\n                    <p className=\"text-gray-700\">Source code with detailed comments and README</p>\n                  </div>\n                </div>\n\n                <div className=\"mt-8 p-6 bg-blue-50 rounded-xl\">\n                  <h3 className=\"font-bold text-gray-900 mb-2\">Development Process</h3>\n                  <p className=\"text-gray-700 mb-4\">I follow an agile development approach with regular updates and milestone reviews:</p>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <h4 className=\"font-semibold text-gray-900\">Week 1-2: Planning & Setup</h4>\n                      <p className=\"text-sm text-gray-600\">Requirements gathering, architecture design, project setup</p>\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold text-gray-900\">Week 3-4: Backend Development</h4>\n                      <p className=\"text-sm text-gray-600\">API development, database schema, authentication</p>\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold text-gray-900\">Week 5-6: Frontend Development</h4>\n                      <p className=\"text-sm text-gray-600\">React components, UI/UX implementation, integration</p>\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold text-gray-900\">Week 7-8: Testing & Deployment</h4>\n                      <p className=\"text-sm text-gray-600\">Quality assurance, deployment, documentation</p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Pricing Card */}\n            <Card className=\"bg-white rounded-2xl shadow-md border border-gray-100 p-6 sticky top-24\">\n              <div className=\"text-center mb-6\">\n                <div className=\"text-3xl font-bold text-blue-600 mb-2\" data-testid=\"text-project-price\">\n                  ${project.price}\n                </div>\n                <p className=\"text-gray-600\">Complete project price</p>\n              </div>\n\n              <div className=\"space-y-4 mb-6\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-gray-600\">Delivery Time:</span>\n                  <span className=\"font-medium\" data-testid=\"text-delivery-time\">\n                    {project.deliveryTime} weeks\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-gray-600\">Revisions:</span>\n                  <span className=\"font-medium\" data-testid=\"text-revisions\">\n                    {project.revisions} included\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-gray-600\">University:</span>\n                  <span className=\"font-medium\" data-testid=\"text-sidebar-university\">\n                    {project.studentProfile?.university}\n                  </span>\n                </div>\n              </div>\n\n              {authData?.user.role === \"BUYER\" && (\n                <>\n                  <Button\n                    onClick={handleHireStudent}\n                    disabled={createOrder.isPending}\n                    className=\"w-full bg-brand-gradient text-white py-4 rounded-xl font-semibold text-lg hover:opacity-90 mb-4\"\n                    data-testid=\"button-hire-student\"\n                  >\n                    {createOrder.isPending ? \"Processing...\" : `Hire ${project.owner?.name.split(' ')[0]}`}\n                  </Button>\n\n                  <Button\n                    variant=\"outline\"\n                    className=\"w-full border-gray-200 text-gray-700 py-3 rounded-xl font-medium hover:bg-gray-50\"\n                    data-testid=\"button-contact-student\"\n                  >\n                    <MessageCircle className=\"w-4 h-4 mr-2\" />\n                    Contact Student\n                  </Button>\n                </>\n              )}\n\n              {authData?.user.role === \"STUDENT\" && project.ownerId === authData.user.id && (\n                <Button\n                  variant=\"outline\"\n                  className=\"w-full border-blue-200 text-blue-700 py-3 rounded-xl font-medium hover:bg-blue-50\"\n                  data-testid=\"button-edit-project\"\n                >\n                  Edit Project\n                </Button>\n              )}\n            </Card>\n\n            {/* Student Stats */}\n            <Card className=\"bg-white rounded-2xl shadow-md border border-gray-100 p-6\">\n              <h3 className=\"font-bold text-gray-900 mb-4\">Student Performance</h3>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-gray-600\">Response Time:</span>\n                  <span className=\"font-medium\">&lt; 2 hours</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-gray-600\">Completed Orders:</span>\n                  <span className=\"font-medium\">24</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-gray-600\">On-time Delivery:</span>\n                  <span className=\"font-medium text-green-600\">100%</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-gray-600\">Member Since:</span>\n                  <span className=\"font-medium\">Jan 2024</span>\n                </div>\n              </div>\n            </Card>\n\n            {/* Related Projects */}\n            {filteredRelatedProjects.length > 0 && (\n              <Card className=\"bg-white rounded-2xl shadow-md border border-gray-100 p-6\">\n                <h3 className=\"font-bold text-gray-900 mb-4\">\n                  More from {project.owner?.name.split(' ')[0]}\n                </h3>\n                <div className=\"space-y-4\">\n                  {filteredRelatedProjects.map((relatedProject) => (\n                    <div\n                      key={relatedProject.id}\n                      className=\"border border-gray-200 rounded-xl p-4 hover:border-blue-300 transition-colors cursor-pointer\"\n                      onClick={() => setLocation(`/project/${relatedProject.slug}`)}\n                      data-testid={`related-project-${relatedProject.id}`}\n                    >\n                      <h4 className=\"font-medium text-gray-900 mb-1\" data-testid={`text-related-title-${relatedProject.id}`}>\n                        {relatedProject.title}\n                      </h4>\n                      <p className=\"text-sm text-gray-600 mb-2\">\n                        {relatedProject.tags[0]} • {relatedProject.deliveryTime} weeks\n                      </p>\n                      <span className=\"text-blue-600 font-bold\" data-testid={`text-related-price-${relatedProject.id}`}>\n                        ${relatedProject.price}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              </Card>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":18512},"client/src/pages/student-dashboard.tsx":{"content":"import { NavHeader } from \"@/components/nav-header\";\nimport { StatCard } from \"@/components/stat-card\";\nimport { VerificationStatus } from \"@/components/verification-status\";\nimport { ProjectCard } from \"@/components/project-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { \n  DollarSign, \n  Briefcase, \n  FolderOpen, \n  Users, \n  Plus, \n  Code, \n  PaintbrushVertical, \n  BarChart3,\n  Settings,\n  ChartLine,\n  Upload\n} from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/lib/auth\";\nimport { Project, Stats } from \"@/types\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useLocation } from \"wouter\";\n\nconst projectSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  description: z.string().min(10, \"Description must be at least 10 characters\"),\n  skills: z.string().min(1, \"Skills are required\"),\n  tags: z.string().min(1, \"Category is required\"),\n  price: z.number().min(1, \"Price must be at least $1\"),\n  deliveryTime: z.number().min(1, \"Delivery time must be at least 1 week\"),\n  revisions: z.number().min(0, \"Revisions cannot be negative\").default(3),\n});\n\ntype ProjectForm = z.infer<typeof projectSchema>;\n\nexport default function StudentDashboard() {\n  const { data: authData } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n  const [showCreateProject, setShowCreateProject] = useState(false);\n\n  const { data: stats } = useQuery<Stats>({\n    queryKey: [\"/api/stats\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/stats\", { credentials: \"include\" });\n      return response.json();\n    },\n  });\n\n  const { data: projects } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\", \"student\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/projects?ownerId=${authData?.user.id}`, {\n        credentials: \"include\",\n      });\n      return response.json();\n    },\n    enabled: !!authData?.user.id,\n  });\n\n  const { data: orders } = useQuery({\n    queryKey: [\"/api/orders\", \"student\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/orders\", { credentials: \"include\" });\n      return response.json();\n    },\n  });\n\n  const createProject = useMutation({\n    mutationFn: async (data: ProjectForm) => {\n      const skillsArray = data.skills.split(\",\").map(s => s.trim());\n      const tagsArray = [data.tags];\n      \n      const response = await apiRequest(\"POST\", \"/api/projects\", {\n        ...data,\n        skills: skillsArray,\n        tags: tagsArray,\n        status: \"LISTED\",\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n      setShowCreateProject(false);\n      toast({\n        title: \"Project created!\",\n        description: \"Your project has been listed on the marketplace.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const uploadIdDoc = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/student/verify-id\", {});\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      toast({\n        title: \"ID document uploaded\",\n        description: \"Your verification is now pending admin review.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const form = useForm<ProjectForm>({\n    resolver: zodResolver(projectSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      skills: \"\",\n      tags: \"\",\n      price: 0,\n      deliveryTime: 1,\n      revisions: 3,\n    },\n  });\n\n  const handleProjectView = (project: Project) => {\n    setLocation(`/project/${project.slug}`);\n  };\n\n  const studentProfile = authData?.user.role === \"STUDENT\" ? authData?.profile as any : null;\n  const isVerified = studentProfile?.verificationStatus === \"APPROVED\";\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <NavHeader />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Dashboard Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\" data-testid=\"text-dashboard-title\">\n            Student Dashboard\n          </h1>\n          <p className=\"text-gray-600\">Manage your projects, earnings, and profile</p>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <StatCard\n            title=\"Total Earnings\"\n            value={`$${stats?.totalEarnings || 0}`}\n            icon={DollarSign}\n            change=\"+12%\"\n            changeType=\"positive\"\n            iconBgColor=\"bg-green-100\"\n            iconTextColor=\"text-green-600\"\n          />\n          <StatCard\n            title=\"Active Orders\"\n            value={stats?.activeOrders || 0}\n            icon={Briefcase}\n            change=\"+2\"\n            changeType=\"positive\"\n            iconBgColor=\"bg-blue-100\"\n            iconTextColor=\"text-blue-600\"\n          />\n          <StatCard\n            title=\"My Projects\"\n            value={stats?.totalProjects || 0}\n            icon={FolderOpen}\n            change={`${stats?.activeProjects || 0}`}\n            changeType=\"neutral\"\n            iconBgColor=\"bg-purple-100\"\n            iconTextColor=\"text-purple-600\"\n          />\n          <StatCard\n            title=\"Team Invites\"\n            value=\"5\"\n            icon={Users}\n            change=\"3\"\n            changeType=\"neutral\"\n            iconBgColor=\"bg-orange-100\"\n            iconTextColor=\"text-orange-600\"\n          />\n        </div>\n\n        {/* Main Content Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Recent Projects */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"bg-white rounded-2xl shadow-md border border-gray-100\">\n              <CardHeader className=\"p-6 border-b border-gray-100\">\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-xl font-bold text-gray-900\">My Projects</CardTitle>\n                  <Dialog open={showCreateProject} onOpenChange={setShowCreateProject}>\n                    <DialogTrigger asChild>\n                      <Button \n                        className=\"bg-blue-600 text-white hover:bg-blue-700\"\n                        data-testid=\"button-create-project\"\n                      >\n                        <Plus className=\"w-4 h-4 mr-2\" />\n                        Create New\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"max-w-2xl\">\n                      <DialogHeader>\n                        <DialogTitle>Create New Project</DialogTitle>\n                      </DialogHeader>\n                      <form onSubmit={form.handleSubmit((data) => createProject.mutate(data))} className=\"space-y-4\">\n                        <div>\n                          <Label htmlFor=\"title\">Project Title</Label>\n                          <Input\n                            id=\"title\"\n                            {...form.register(\"title\")}\n                            placeholder=\"e.g., Full-Stack React Application\"\n                            data-testid=\"input-project-title\"\n                          />\n                          {form.formState.errors.title && (\n                            <p className=\"text-red-500 text-sm mt-1\">\n                              {form.formState.errors.title.message}\n                            </p>\n                          )}\n                        </div>\n\n                        <div>\n                          <Label htmlFor=\"description\">Description</Label>\n                          <Textarea\n                            id=\"description\"\n                            {...form.register(\"description\")}\n                            placeholder=\"Describe what you'll deliver...\"\n                            rows={4}\n                            data-testid=\"input-project-description\"\n                          />\n                          {form.formState.errors.description && (\n                            <p className=\"text-red-500 text-sm mt-1\">\n                              {form.formState.errors.description.message}\n                            </p>\n                          )}\n                        </div>\n\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <Label htmlFor=\"skills\">Skills (comma-separated)</Label>\n                            <Input\n                              id=\"skills\"\n                              {...form.register(\"skills\")}\n                              placeholder=\"React, Node.js, MongoDB\"\n                              data-testid=\"input-project-skills\"\n                            />\n                            {form.formState.errors.skills && (\n                              <p className=\"text-red-500 text-sm mt-1\">\n                                {form.formState.errors.skills.message}\n                              </p>\n                            )}\n                          </div>\n\n                          <div>\n                            <Label htmlFor=\"tags\">Category</Label>\n                            <Input\n                              id=\"tags\"\n                              {...form.register(\"tags\")}\n                              placeholder=\"Web Development\"\n                              data-testid=\"input-project-category\"\n                            />\n                            {form.formState.errors.tags && (\n                              <p className=\"text-red-500 text-sm mt-1\">\n                                {form.formState.errors.tags.message}\n                              </p>\n                            )}\n                          </div>\n                        </div>\n\n                        <div className=\"grid grid-cols-3 gap-4\">\n                          <div>\n                            <Label htmlFor=\"price\">Price ($)</Label>\n                            <Input\n                              id=\"price\"\n                              type=\"number\"\n                              {...form.register(\"price\", { valueAsNumber: true })}\n                              placeholder=\"299\"\n                              data-testid=\"input-project-price\"\n                            />\n                            {form.formState.errors.price && (\n                              <p className=\"text-red-500 text-sm mt-1\">\n                                {form.formState.errors.price.message}\n                              </p>\n                            )}\n                          </div>\n\n                          <div>\n                            <Label htmlFor=\"deliveryTime\">Delivery (weeks)</Label>\n                            <Input\n                              id=\"deliveryTime\"\n                              type=\"number\"\n                              {...form.register(\"deliveryTime\", { valueAsNumber: true })}\n                              placeholder=\"8\"\n                              data-testid=\"input-project-delivery\"\n                            />\n                            {form.formState.errors.deliveryTime && (\n                              <p className=\"text-red-500 text-sm mt-1\">\n                                {form.formState.errors.deliveryTime.message}\n                              </p>\n                            )}\n                          </div>\n\n                          <div>\n                            <Label htmlFor=\"revisions\">Revisions</Label>\n                            <Input\n                              id=\"revisions\"\n                              type=\"number\"\n                              {...form.register(\"revisions\", { valueAsNumber: true })}\n                              placeholder=\"3\"\n                              data-testid=\"input-project-revisions\"\n                            />\n                            {form.formState.errors.revisions && (\n                              <p className=\"text-red-500 text-sm mt-1\">\n                                {form.formState.errors.revisions.message}\n                              </p>\n                            )}\n                          </div>\n                        </div>\n\n                        <div className=\"flex justify-end space-x-2 pt-4\">\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            onClick={() => setShowCreateProject(false)}\n                            data-testid=\"button-cancel-project\"\n                          >\n                            Cancel\n                          </Button>\n                          <Button\n                            type=\"submit\"\n                            disabled={createProject.isPending}\n                            className=\"bg-blue-600 text-white hover:bg-blue-700\"\n                            data-testid=\"button-submit-project\"\n                          >\n                            {createProject.isPending ? \"Creating...\" : \"Create Project\"}\n                          </Button>\n                        </div>\n                      </form>\n                    </DialogContent>\n                  </Dialog>\n                </div>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                {projects?.length === 0 ? (\n                  <div className=\"text-center py-12\">\n                    <FolderOpen className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No projects yet</h3>\n                    <p className=\"text-gray-600 mb-4\">Create your first project to start earning!</p>\n                    <Button\n                      onClick={() => setShowCreateProject(true)}\n                      className=\"bg-blue-600 text-white hover:bg-blue-700\"\n                      data-testid=\"button-create-first-project\"\n                    >\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Create Project\n                    </Button>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {projects?.map((project) => (\n                      <div\n                        key={project.id}\n                        className=\"flex items-center justify-between p-4 bg-gray-50 rounded-xl cursor-pointer hover:bg-gray-100 transition-colors\"\n                        onClick={() => handleProjectView(project)}\n                        data-testid={`project-item-${project.id}`}\n                      >\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"w-12 h-12 bg-blue-100 rounded-xl flex items-center justify-center\">\n                            <Code className=\"text-blue-600\" />\n                          </div>\n                          <div>\n                            <h3 className=\"font-semibold text-gray-900\" data-testid={`text-project-title-${project.id}`}>\n                              {project.title}\n                            </h3>\n                            <p className=\"text-sm text-gray-600\">\n                              {project.tags[0]} • ${project.price}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-3\">\n                          <Badge\n                            className={\n                              project.status === \"LISTED\"\n                                ? \"bg-green-100 text-green-700\"\n                                : project.status === \"DRAFT\"\n                                ? \"bg-yellow-100 text-yellow-700\"\n                                : \"bg-blue-100 text-blue-700\"\n                            }\n                            data-testid={`badge-project-status-${project.id}`}\n                          >\n                            {project.status === \"LISTED\" ? \"Active\" : project.status}\n                          </Badge>\n                          <Button variant=\"ghost\" size=\"icon\">\n                            <span className=\"sr-only\">Options</span>\n                            •••\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Verification & Quick Actions */}\n          <div className=\"space-y-6\">\n            {/* Student Verification Status */}\n            {studentProfile && (\n              <VerificationStatus\n                status={studentProfile.verificationStatus}\n                university={studentProfile.university}\n                studentId={studentProfile.studentId}\n                showDetails={true}\n              />\n            )}\n\n            {/* ID Upload for Pending Students */}\n            {studentProfile?.verificationStatus === \"PENDING\" && (\n              <Card className=\"bg-white rounded-2xl shadow-md border border-gray-100 p-6\">\n                <h3 className=\"font-bold text-gray-900 mb-4\">Upload Student ID</h3>\n                <p className=\"text-sm text-gray-600 mb-4\">\n                  Upload your student ID document for verification to start listing projects.\n                </p>\n                <Button\n                  onClick={() => uploadIdDoc.mutate()}\n                  disabled={uploadIdDoc.isPending}\n                  className=\"w-full bg-blue-600 text-white hover:bg-blue-700\"\n                  data-testid=\"button-upload-id\"\n                >\n                  <Upload className=\"w-4 h-4 mr-2\" />\n                  {uploadIdDoc.isPending ? \"Uploading...\" : \"Upload ID Document\"}\n                </Button>\n              </Card>\n            )}\n\n            {/* Quick Actions */}\n            <Card className=\"bg-white rounded-2xl shadow-md border border-gray-100 p-6\">\n              <h2 className=\"text-lg font-bold text-gray-900 mb-4\">Quick Actions</h2>\n              <div className=\"space-y-3\">\n                <Button\n                  variant=\"ghost\"\n                  className=\"w-full bg-blue-50 text-blue-700 hover:bg-blue-100 justify-start\"\n                  onClick={() => setShowCreateProject(true)}\n                  data-testid=\"button-quick-create-project\"\n                >\n                  <Plus className=\"w-4 h-4 mr-3\" />\n                  Create New Project\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  className=\"w-full bg-gray-50 text-gray-700 hover:bg-gray-100 justify-start\"\n                  data-testid=\"button-quick-manage-teams\"\n                >\n                  <Users className=\"w-4 h-4 mr-3\" />\n                  Manage Teams\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  className=\"w-full bg-gray-50 text-gray-700 hover:bg-gray-100 justify-start\"\n                  data-testid=\"button-quick-view-earnings\"\n                >\n                  <ChartLine className=\"w-4 h-4 mr-3\" />\n                  View Earnings\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  className=\"w-full bg-gray-50 text-gray-700 hover:bg-gray-100 justify-start\"\n                  data-testid=\"button-quick-settings\"\n                >\n                  <Settings className=\"w-4 h-4 mr-3\" />\n                  Account Settings\n                </Button>\n              </div>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":20638},"client/src/types/index.ts":{"content":"export interface AuthUser {\n  id: string;\n  email: string;\n  name: string;\n  role: \"STUDENT\" | \"BUYER\" | \"ADMIN\";\n  avatarUrl?: string;\n}\n\nexport interface StudentProfile {\n  id: string;\n  userId: string;\n  university: string;\n  studentId: string;\n  program: string;\n  verificationStatus: \"PENDING\" | \"APPROVED\" | \"REJECTED\";\n  verificationNotes?: string;\n  idDocUrl?: string;\n  selfieUrl?: string;\n}\n\nexport interface BuyerProfile {\n  id: string;\n  userId: string;\n  companyName?: string;\n  website?: string;\n  billingAddress?: string;\n}\n\nexport interface Project {\n  id: string;\n  ownerId: string;\n  title: string;\n  slug: string;\n  description: string;\n  skills: string[];\n  tags: string[];\n  price: number;\n  status: \"DRAFT\" | \"LISTED\" | \"HIRED\" | \"IN_PROGRESS\" | \"DELIVERED\" | \"CLOSED\";\n  visibility: \"PUBLIC\" | \"PRIVATE\";\n  coverImageUrl?: string;\n  deliveryTime: number;\n  revisions: number;\n  createdAt: Date;\n  owner?: AuthUser;\n  studentProfile?: StudentProfile;\n}\n\nexport interface Order {\n  id: string;\n  projectId: string;\n  buyerId: string;\n  studentId: string;\n  amount: number;\n  status: \"PENDING\" | \"PAID\" | \"REFUNDED\" | \"DISPUTED\";\n  stripeSessionId?: string;\n  createdAt: Date;\n  project?: Project;\n  buyer?: AuthUser;\n  student?: AuthUser;\n}\n\nexport interface Favorite {\n  id: string;\n  buyerId: string;\n  projectId: string;\n  createdAt: Date;\n  project?: Project;\n}\n\nexport interface Stats {\n  totalEarnings?: number;\n  activeOrders?: number;\n  totalProjects?: number;\n  activeProjects?: number;\n  totalPurchases?: number;\n  activePurchases?: number;\n  totalFavorites?: number;\n  totalSpent?: number;\n  totalStudents?: number;\n  pendingVerifications?: number;\n  monthlyGMV?: number;\n}\n","size_bytes":1706},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}